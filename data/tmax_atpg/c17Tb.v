// MAX TB Test Protocol File, generated by MAX TB Version U-2022.12
// Sat May 25 17:24:44 2024
// Module under test: c17
// Generated from original STIL file : "/remote/us01home60/dahal/demo_setup/c17/all_pats.stil"
// STIL file version: "1.0"
// Simulation mode: serial only TB (restricted to serial simulation)

`define TDATA_FILE "/remote/us01home60/dahal/demo_setup/c17/c17Tb.v.dat"
`ifndef XTB_DUT_HIER 
  `define XTB_DUT_HIER dut
`endif
`timescale 1ns/1ns

// OPCODE DEFINITION
`define SetLastReseed 0
`define EndPat 1
`define IncPat 2
`define SetPat 3
`define WFTStmt 4
`define ConditionStmt 5
`define VectorStmt 6
`define FixedStmt 7
`define GenLoopStmt 8
`define EndGenLoopStmt 9
`define GenTestSetupStmt 10
`define EndGenTestSetupStmt 11
`define SetForceSI 12
`define SetValidStrobe 13
`define AnnotationStmt 14
`define SetWPack 15
`define SetRPack 16
`define test_setupStmt 17
`define multiclock_captureStmt 18

// SIGS DEFINITION
`define N1 0
`define N2 1
`define N3 2
`define N6 3
`define N7 4
`define si 5
`define se 6
`define N22 7
`define N23 8
`define so 9
`define _pi 10
`define _po 11

// WFTS DEFINITION
`define _multiclock_capture_WFT_ 0
`define _default_WFT_ 1
`define MAX_PART 0

`define MAXTB_HEADER " MAX TB Version U-2022.12\n Test Protocol File generated from original file \"/remote/us01home60/dahal/demo_setup/c17/all_pats.stil\"\n STIL file version: 1.0"
`define MAXTB_H_S "#############################################################################"


module /* maxtb */ c17_test ();
   parameter NSTMTS = 19; // number of all stmts
   parameter DFSHIFTS = -1; // (default) number of serial shifts in parallel scan mode
   parameter NAMELENGTH = 200; // max length of names reported in fails
   parameter FILELENGTH = 1024; // max length for file names 
   parameter MAXCHLEN = 0, NCHAINS = 0;
   parameter NINPUTS = 7, NOUTPUTS = 3, CUM_WIDTH=20;
   parameter NSIS = 0, NSOUTS = 0;
   parameter WFT_IDS = 2, SIG_IDS = 12, SIG_IDS_W = 4, MAX_WIDTH = 7, MAX_SIGW = 1;
   parameter PARSERINC = 0; 
   parameter SYNC_LATENCY = 3; 
   parameter PRTIME = 0.000000; 
   integer xtb_sim_mode; // simulation modes: xtb_sim_mode=0 -> serial, xtb_sim_mode=1 -> parallel (default);
   integer nbfails, abit, cbit;
   integer prev_error; // flag for tracking displayed error banner
   integer loads;        // number of load_unloads for current pattern
   integer prev_pat;     // previous pattern number;
   integer rep_pat; // report pattern progress every Nth pattern
   integer verbose;      // message verbosity level
   integer debug;      // enable debug level
   integer test_setup_runs; // counts the number of executed test_setups
   integer test_setup_only_once; // flag to trigger only one execution of test_setup
   integer data_i, n, cur_pat, start_pat, end_pat, last_pat, total_pats, csci, fsci, cur_stmt, n_pat_sim;
   integer v_count, v_count_per_pat;  // track the cycle count and cycle/pattern count (helpful for the simulator GUI)
   integer v_count_per_stmt;  // track the cycle count per statement (procedure or macro)
   integer SSHIFTS;
   integer diagf, diagm;
   integer sertmg;
   integer the_wft_id, wft_id_s;
   integer first_pat;
   event start_part, end_part;
   event error_ev;
   `define NBRTOPS 5
   integer csim_op;
   reg [32*8:1] RT_OPS [0:`NBRTOPS];
   integer      rt_ops [0:`NBRTOPS-1];
   integer      tdfm;
   integer lp_addr, lp_count, lp_max;
   reg [0:(8*FILELENGTH)-1] TDATA_FILE;

   reg [MAX_SIGW*(NINPUTS+NOUTPUTS)-1:0] ALLINSIGS, ALLOUTSIGS;
   reg [MAX_SIGW*(NINPUTS+NOUTPUTS)-1:0] TMPINSIGS_V,TMPINSIGS_T,TMPINSIGS_V_S,TMPINSIGS_T_S;
   reg [MAX_SIGW*(NINPUTS+NOUTPUTS)-1:0] TMPOUTSIGS_V,TMPOUTSIGS_T,TMPOUTSIGS_V_S,TMPOUTSIGS_T_S;
   reg [NINPUTS+NOUTPUTS-1:0] ALLINSIGIDS, ALLOUTSIGIDS, ALLINSIGIDS_S, ALLOUTSIGIDS_S;
   reg [NSTMTS-1:0] opcode, popcode;
   reg [43:0] memel, memall [1:36];
   reg [0:(8*NAMELENGTH)-1] CH_NAMES [0:NCHAINS-1];
   reg [0:(8*NAMELENGTH)-1] CH_PINS [0:NCHAINS-1];
   reg [0:MAXCHLEN-1] LOD, LOAD[0:NSIS-1];
   reg [0:MAXCHLEN-1] UNL, UNLOAD[0:NSOUTS-1];
   integer set_last_reseed;
   reg strobe_en;
   reg [SIG_IDS-1:0] sid_args ;
   reg [2*CUM_WIDTH-1:0] sval_args;
   reg [3:0] the_sids [0:SIG_IDS-1];
   reg [8*NAMELENGTH-1:0]  SignalIDName [0:11];
   reg [2:0]  SignalIDType [0:11];
   reg [2:0]  SignalIDWidth [0:11];
   reg [(8*NAMELENGTH-1):0]  WFTIDName [0:1];
   reg [0:(8*FILELENGTH)-1] diag_file;
   reg [0:(8*NAMELENGTH-1)] StmtNames [0:NSTMTS];

   reg N1_con ;
   reg N2_con ;
   reg N3_con ;
   reg N6_con ;
   reg N7_con ;
   reg si_con ;
   reg se_con ;
   wire N22_con ;
   wire N23_con ;
   wire so_con ;

   wire [0:(8*NAMELENGTH-1)] cur_StmtName;
   assign cur_StmtName = StmtNames[cur_stmt] ;


   c17 dut ( 
     .N1 ( N1_con ),
     .N2 ( N2_con ),
     .N3 ( N3_con ),
     .N6 ( N6_con ),
     .N7 ( N7_con ),
     .si ( si_con ),
     .se ( se_con ),
     .N22 ( N22_con ),
     .N23 ( N23_con ),
     .so ( so_con )
  );


   task save_context;
     begin
       wft_id_s = the_wft_id;
       TMPINSIGS_V_S = TMPINSIGS_V;
       TMPOUTSIGS_V_S = TMPOUTSIGS_V;
       TMPINSIGS_T_S = TMPINSIGS_T;
       TMPOUTSIGS_T_S = TMPOUTSIGS_T;
       ALLOUTSIGIDS_S = ALLOUTSIGIDS;
       ALLINSIGIDS_S = ALLINSIGIDS;
     end
   endtask 

   task restore_context;
     begin
       the_wft_id = wft_id_s;
       TMPINSIGS_V = TMPINSIGS_V_S;
       TMPOUTSIGS_V = TMPOUTSIGS_V_S;
       TMPINSIGS_T = TMPINSIGS_T_S;
       TMPOUTSIGS_T = TMPOUTSIGS_T_S;
       ALLOUTSIGIDS = ALLOUTSIGIDS_S;
       ALLINSIGIDS = ALLINSIGIDS_S;
     end
   endtask 

   task resolve_signal;
     input reg [3:0] sid;
   begin
     if (SignalIDType[sid] != 3) the_sids[0] = sid;
     else begin
       case (sid)
         'd10: begin // _pi
                 the_sids[6] = 0; the_sids[5] = 1; the_sids[4] = 2; the_sids[3] = 3; the_sids[2] = 4; the_sids[1] = 5;
                 the_sids[0] = 6;
               end
         'd11: begin // _po
                 the_sids[2] = 7; the_sids[1] = 8;
                 the_sids[0] = 9;
               end
          default: begin $display("\nXTB Error: unrecognized signal id %d (valid range is 0..%d). Exiting...",sid, SIG_IDS); $finish; end
       endcase
     end
   end
   endtask

   task get_stb_sig;
     input reg [3:0] sid ;
     output reg [MAX_WIDTH-1:0] strsig;
   begin
     case (sid)
       'd7:	strsig[0:0] = 	N22_con ;
       'd8:	strsig[0:0] = 	N23_con ;
       'd9:	strsig[0:0] = 	so_con ;
       default: begin $display("\nXTB Error: unrecognized output signal id %d. Exiting...",sid); $finish; end
     endcase
   end
   endtask

   task set_force_sig;
     input reg [SIG_IDS-1:0] sid ;
   begin
     case (sid)
       'd0: N1_con 	= ALLINSIGS[sid];
       'd1: N2_con 	= ALLINSIGS[sid];
       'd2: N3_con 	= ALLINSIGS[sid];
       'd3: N6_con 	= ALLINSIGS[sid];
       'd4: N7_con 	= ALLINSIGS[sid];
       'd5: si_con 	= ALLINSIGS[sid];
       'd6: se_con 	= ALLINSIGS[sid];
       default: begin $display("\nXTB Error: unrecognized (input) signal id %d (valid range is 0..%d). Exiting...",sid, SIG_IDS-1); $finish; end
     endcase
   end
   endtask 

   always  begin: force_sigs_p
     reg [SIG_IDS-1:0] sid; 
     reg [MAX_SIGW-1:0] sig;
     fork
        forever @(ALLINSIGS[0]) set_force_sig('d`N1 );
        forever @(ALLINSIGS[1]) set_force_sig('d`N2 );
        forever @(ALLINSIGS[2]) set_force_sig('d`N3 );
        forever @(ALLINSIGS[3]) set_force_sig('d`N6 );
        forever @(ALLINSIGS[4]) set_force_sig('d`N7 );
        forever @(ALLINSIGS[5]) set_force_sig('d`si );
        forever @(ALLINSIGS[6]) set_force_sig('d`se );
     join
   end

   task measure_out_sig;
     input reg [SIG_IDS-1:0] sid ;
     input integer  stmtid;
     reg [MAX_WIDTH-1:0] xsig;
     reg [MAX_WIDTH-1:0] csig;
     integer errshown, abit, cpat;
   begin
     errshown = 0;
     cpat = cur_pat < 0 ? 0 : cur_pat;
     get_stb_sig(sid,csig);
     xsig = ALLOUTSIGS[sid ];
     for (abit = 0; abit < SignalIDWidth[sid]; abit = abit + 1) begin
       if (xsig[abit] !== 1'bx) begin
         if (xsig[abit] !== csig[abit]) begin
           if (errshown == 0) $display(">>>  Error during %0s pattern %0d", StmtNames[stmtid], cpat);
           if (SignalIDWidth[sid] <= 1) begin 
             $display(">>>  \tAt T=%0t, V=%0d, exp=%b, got=%b, signal %0s", $time, v_count, xsig[abit], csig[abit], SignalIDName[sid]);
             if (diagf) begin 
               if (diagm==2) $fdisplay(diagf, "  C %0s %0d (exp=%b, got=%b)", SignalIDName[sid], v_count, xsig[abit], csig[abit]);
               else $fdisplay(diagf, "  %0d %0s (exp=%b, got=%b)", cpat, SignalIDName[sid], xsig[abit], csig[abit]);
             end 
           end 
           else begin 
             $display(">>>  \tAt T=%0t, V=%0d, exp=%b, got=%b, signal %0s[%0d]", $time, v_count, xsig[abit], csig[abit], SignalIDName[sid], abit);
             if (diagf) begin 
               if (diagm==2) $fdisplay(diagf, "  C %0s[%0d] %0d (exp=%b, got=%b)", SignalIDName[sid], abit, v_count, xsig[abit], csig[abit]);
               else $fdisplay(diagf, "  %0d %0s[%d] (exp=%b, got=%b)", cpat, SignalIDName[sid], abit, xsig[abit], csig[abit]);
             end 
           end 
           nbfails = nbfails + 1;
           errshown = 1;
           ->error_ev;
         end 
       end 
     end 
   end 
   endtask

   task measure_scan_out;
     input reg [SIG_IDS-1:0] sid ;
     input integer  chain;
     reg [MAX_WIDTH-1:0] xsig;
     reg [MAX_WIDTH-1:0] csig;
     integer errshown, patoff;
   begin
     errshown = 0;
     get_stb_sig(sid, csig);
     xsig = ALLOUTSIGS[sid ];
     if ((xsig[0] !==1'bx) && (xsig[0] !== csig[0])) begin
       patoff = (loads > 1 || cur_pat <= 0) ? 0 : 1;
       if (prev_error != cur_pat) begin
         if (cur_pat <= 0 || cur_pat == last_pat && loads > 1) begin
           $display(">>>  Error during scan pattern %0d %s", (cur_pat < 0) ? 0 : cur_pat,  (cur_pat == last_pat) ? "(detected from final pattern unload)" : "");
         end
         else begin
           if (loads > 1) $display(">>>  Error during scan pattern %0d (detected from %0d load/unload)", cur_pat, loads);
           else begin $display(">>>  Error during scan pattern %0d (detected from unload of pattern %0d)", cur_pat, cur_pat-1); end
         end 
         prev_error = cur_pat;
       end
       $display(">>>  \tAt T=%0t, V=%0d, exp=%b, got=%b, chain %0s, pin %0s, scan cell %0d", $time, v_count, xsig[0], csig[0], CH_NAMES[chain], SignalIDName[sid], fsci);
       if (diagf) begin 
         if (diagm==2) $fdisplay(diagf, "  C %0s %0d (exp=%b, got=%b)", SignalIDName[sid], v_count, xsig[0], csig[0]);
          else $fdisplay(diagf, "  %0d %0s %0d (exp=%b, got=%b)", cur_pat-patoff, SignalIDName[sid], fsci, xsig[0], csig[0]);
       end 
       nbfails = nbfails + 1;
       ->error_ev;
             check_max_error_limit;
     end
   end 
   endtask

   always begin: measure_sigs_p
    fork
     forever @(ALLOUTSIGS['d`N22]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`N22, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`N23]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`N23, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`so]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`so, cur_stmt); 
     end
    join
   end 

   task undef_wfc;
     input reg [1:0] wfc;
     input reg [3:0] sid;
     input integer wftid;
   begin
     $display("XTB Error: unrecognized %s value (WFC):%0b, on signal %0s for WFT %0s. Exiting...", wfc[1]?"strobe":"force", wfc[0], SignalIDName[sid], WFTIDName[wftid]);
     $finish;
   end
   endtask

   task apply__multiclock_capture_WFT_WFT;
     reg [SIG_IDS_W-1:0] sid;
     reg [SIG_IDS_W-1:0] n;
     reg [SIG_IDS-1:0] s;
   begin
     for (sid=0; sid < SIG_IDS; sid=sid+1) begin
       n=0; 
       case(sid)
         'd0, 'd1, 'd2, 'd3, 'd4, 'd5, 'd6: // N1, N2, N3, N6, N7, si, se_con
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 0);
               endcase
             end
           end
         end 
         'd7, 'd8, 'd9: // N22, N23, so_con
         begin
           if (ALLOUTSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPOUTSIGS_T[MAX_SIGW*sid+n],TMPOUTSIGS_V[MAX_SIGW*sid+n]})
                 2'b1X: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(1) 1'bX;   end
                 2'b11: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(1) 1'b1;   end
                 2'b10: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(1) 1'b0;   end
                 2'b1Z: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(1) 1'bZ;   end
                 default: undef_wfc({TMPOUTSIGS_T[MAX_SIGW*sid+n],TMPOUTSIGS_V[MAX_SIGW*sid+n]}, sid, 0);
               endcase
             end
           end
         end 
       endcase 
     end 
   end 
   endtask

   task apply__default_WFT_WFT;
     reg [SIG_IDS_W-1:0] sid;
     reg [SIG_IDS_W-1:0] n;
     reg [SIG_IDS-1:0] s;
   begin
     for (sid=0; sid < SIG_IDS; sid=sid+1) begin
       n=0; 
       case(sid)
         'd0, 'd1, 'd2, 'd3, 'd4, 'd5, 'd6: // N1, N2, N3, N6, N7, si, se_con
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 1);
               endcase
             end
           end
         end 
         'd7, 'd8, 'd9: // N22, N23, so_con
         begin
           if (ALLOUTSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPOUTSIGS_T[MAX_SIGW*sid+n],TMPOUTSIGS_V[MAX_SIGW*sid+n]})
                 2'b1X: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(1) 1'bX;   end
                 2'b11: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(1) 1'b1;   end
                 2'b10: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(1) 1'b0;   end
                 2'b1Z: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(1) 1'bZ;   end
                 default: undef_wfc({TMPOUTSIGS_T[MAX_SIGW*sid+n],TMPOUTSIGS_V[MAX_SIGW*sid+n]}, sid, 1);
               endcase
             end
           end
         end 
       endcase 
     end 
   end 
   endtask

   task resolve_wft;
     input integer wftid ;
   begin
     if (wftid > WFT_IDS || wftid <0) begin 
       $display("\nXTB Error: undefined WFT id %0d (valid range is 0..%0d). Exiting...",wftid, WFT_IDS);
       $finish;
     end
     the_wft_id = wftid;
   end
   endtask

   task apply_wft; 
     input integer wftid ;
   begin
     case (wftid) 
       'd0: apply__multiclock_capture_WFT_WFT;
       'd1: apply__default_WFT_WFT;
       default:begin $display("\nXTB Error: undefined WFT id %d. Exiting...",wftid); $finish; end
     endcase
   end
   endtask 

   task complete_cycle;
     input integer wft_id ;
   begin
     case(wft_id)
       'd0: #(15); // _multiclock_capture_WFT_
       'd1: #(15); // _default_WFT_
     endcase
   end
   endtask

   task set_args;
     input reg [3:0] nargs;
     integer i, na;
     reg [2*CUM_WIDTH-1:0] sidx;
     reg [SIG_IDS_W-1:0] sid; 
   begin
     na = 0; sid_args = 'b0; sval_args = 'b0;
     while (na < nargs) begin
       data_i = data_i + 1;
       memel = memall[data_i];
       sid = memel[SIG_IDS_W-1:0];
       if (sid > SIG_IDS-1) begin
         $display($time, "\nXTB Error: Passing wrong signal ID (%0b), valid range is 1..%0d. Exiting...", sid, SIG_IDS-1);
         $finish; 
       end
       sid_args[sid] = 1'b1;
       sidx = sig_idx(sid);
       for (i = 0; i < 2*SignalIDWidth[sid]; i = i + 1)
         sval_args[sidx+i] = memel[i+SIG_IDS_W];
       na=na+1; 
    end  
  end 
  endtask

   function [2*CUM_WIDTH-1:0] sig_idx;
     input reg [SIG_IDS_W-1:0] sid;
     integer i; 
   begin
     sig_idx = 0;
     for (i = 0; i < sid; i = i + 1)  sig_idx = sig_idx+2*SignalIDWidth[i]; 
   end 
   endfunction

   task  assign_mval;
     input reg [SIG_IDS_W-1:0] sid;
     input reg [2*MAX_WIDTH-1:0] msval;
     reg [2*CUM_WIDTH-1:0] sidx;
     reg [2*MAX_WIDTH-1:0] sval;
     integer i;
   begin 
     sidx = sig_idx(sid);
     for (i = 0; i<2*SignalIDWidth[sid]; i = i + 1) sval[i] = (msval[SignalIDWidth[sid] + i] !== 1'bx && i < SignalIDWidth[sid]) ? msval[i] : sval_args[sidx+i]  ;
     assign_val(sid , sval);
   end 
   endtask

   task  assign_ival;
     input reg [SIG_IDS_W-1:0] sid;
     reg [2*CUM_WIDTH-1:0] sidx;
     reg [2*MAX_WIDTH-1:0] sval;
     integer i;
   begin 
     sidx = sig_idx(sid);
     for (i = 0; i<2*SignalIDWidth[sid]; i = i + 1) sval[i] = sval_args[sidx+i];
     assign_val(sid , sval);
   end 
   endtask

   task  assign_val;
     input reg [SIG_IDS_W-1:0] sid;
     input reg [2*MAX_WIDTH-1:0] sval;
     reg [MAX_WIDTH-1:0] nb; 
     reg [5:0] idx;
     integer n, ns;
   begin
     if (sid > SIG_IDS-1 || sid < 0) begin
       $display("\nXTB Error: Passing wrong signal ID (%d), valid range is 1..%0d. Exiting...", sid, SIG_IDS-1);
       $finish;
     end
     resolve_signal(sid);
     idx = 0; 
     ns = (SignalIDType[sid]==3) ? SignalIDWidth[sid] : 1;
     for (n = 0; n < ns; n = n + 1)
     begin
       if (sval[idx+SignalIDWidth[sid]] === 1'b1) begin
         for (nb = 0; nb < SignalIDWidth[the_sids[n]]; nb = nb + 1) begin
           TMPOUTSIGS_V[MAX_SIGW*the_sids[n]+nb]  = sval[idx+nb];
           TMPOUTSIGS_T[MAX_SIGW*the_sids[n]+nb]  = sval[idx+nb+SignalIDWidth[sid]];
           ALLOUTSIGIDS[the_sids[n]] = 1'b1; 
           if (sval[idx+nb] !== 1'bx)
             ALLINSIGIDS[the_sids[n]] = 1'b0;
         end
       end
       else begin
         for (nb = 0; nb < SignalIDWidth[the_sids[n]]; nb = nb + 1) begin
           TMPINSIGS_V[MAX_SIGW*the_sids[n]+nb]  = sval[idx+nb];
           TMPINSIGS_T[MAX_SIGW*the_sids[n]+nb]  = sval[idx+nb+SignalIDWidth[sid]];
           ALLINSIGIDS[the_sids[n]] = 1'b1;
           ALLOUTSIGIDS[the_sids[n]] = 1'b0;
       end 
     end
     idx = idx+SignalIDWidth[the_sids[n]];
     end 
   end 
   endtask

   task  check_sid_args;
     input reg [(NAMELENGTH-1):0] tname;
     input reg [SIG_IDS-1:0] vargs ;
     input reg [SIG_IDS-1:0] cargs ;
     integer i;
   begin
     for (i = 0; i < SIG_IDS-1; i = i + 1)
       if (cargs[i] === 1'b1 && vargs[i] !== 1'b1) begin
         $display("\nXTB Error: Passing wrong signal argument (%s), to Macro/Procedure %s. Exiting...", SignalIDName[i], tname); 
         $finish;
       end 
   end 
   endtask

   task  assign_stmt;
     input integer wftid ;
   begin
     v_count = v_count+1;
     v_count_per_pat = v_count_per_pat+1;
     v_count_per_stmt = v_count_per_stmt+1;
     if (verbose >= 4) $display("XTB: Starting V# %0d at time %0t", v_count, $time);
     apply_wft(wftid);
     complete_cycle(wftid);
   end
   endtask

   task display_stmt;
     input integer stmtid;
   begin
     $display("XTB: Processed statement: %0s", StmtNames[stmtid]);
   end
   endtask

   task read_data;
     integer tdf;
   begin
     tdf = $fopen(TDATA_FILE, "r");
     if (!tdf) begin 
       $display("XTB Error: cannot open %0s file. Exiting...\n", TDATA_FILE);
       $finish; 
      end 
      $fclose(tdf); 
     if (tdfm > 0) $display("XTB: Setting test data file to \"%0s\" (at %0s). Running simulation with new database...", TDATA_FILE, tdfm==1?"compile-time":"runtime");
     else if (verbose >= 1) $display("XTB: Reading test data file \"%0s\" ", TDATA_FILE);
     $readmemb(TDATA_FILE, memall);
   end
    endtask

   task test_setup ;
     input reg [SIG_IDS-1:0] idargs;
     input reg [2*CUM_WIDTH-1:0] valargs;
   begin
     v_count_per_stmt = 0;
     if (test_setup_only_once > 0 && test_setup_runs > 0) begin
       if (verbose >= 2) $display("XTB: Skipping macro test_setup...");
       disable test_setup;
     end
     test_setup_runs = test_setup_runs + 1;
     if (verbose >= 2) $display("XTB: Starting macro test_setup..., T=%0t, V=%0d", $time, v_count+1);
     //check_sid_args("test_setup",12'b1, idargs);
     resolve_wft(1);

     assign_stmt(the_wft_id);

     assign_stmt(the_wft_id);

   end 
   endtask

   task multiclock_capture ;
     input reg [SIG_IDS-1:0] idargs;
     input reg [2*CUM_WIDTH-1:0] valargs;
   begin
     v_count_per_stmt = 0;
     if (verbose >= 2) $display("XTB: Starting proc multiclock_capture..., T=%0t, V=%0d", $time, v_count+1);
     //check_sid_args("multiclock_capture",12'b1, idargs);
     save_context;
     resolve_wft(0);

     assign_val('d`N22 , 2'b1X);
     assign_val('d`N23 , 2'b1X);
     assign_val('d`so , 2'b1X);

     if (idargs[11] === 1'b1) assign_ival('d`_po );
     if (idargs[7] === 1'b1) assign_ival('d`N22 );
     if (idargs[8] === 1'b1) assign_ival('d`N23 );
     if (idargs[9] === 1'b1) assign_ival('d`so );
     if (idargs[10] === 1'b1) assign_ival('d`_pi );
     if (idargs[0] === 1'b1) assign_ival('d`N1 );
     if (idargs[1] === 1'b1) assign_ival('d`N2 );
     if (idargs[2] === 1'b1) assign_ival('d`N3 );
     if (idargs[3] === 1'b1) assign_ival('d`N6 );
     if (idargs[4] === 1'b1) assign_ival('d`N7 );
     if (idargs[5] === 1'b1) assign_ival('d`si );
     if (idargs[6] === 1'b1) assign_ival('d`se );
     assign_stmt(the_wft_id);

     restore_context;
   end 
   endtask


   always @(start_part) begin: _burst__pattern__proc_unit

     integer nbpats, i;
     integer nargs, na;
     integer args;

     integer tdf;
     nbpats = 0; cur_pat = -1;
     loads = 1;

     end_pat = 0; v_count = 0; v_count_per_pat = 0; v_count_per_stmt = 0;
     nbfails = 0;
     prev_pat = -2; prev_error = -2; first_pat = 0;
     diagf = 0;
     if ( $value$plusargs ("tmax_diag_file=%s", diag_file )) diagm = diagm ? diagm : 1;
     read_data;
     data_i = 1; 
     popcode = 'd0;

     if (diagm > 0) begin
       if (diagm > 2) begin
         $display("XTB Warning: wrong diagnosis mode (%0d), using default mode 1 (pattern based)", diagm);
         diagm = 1 ; 
       end  
       if ( $value$plusargs ("tmax_diag_file=%s", diag_file )) begin
         $display("XTB: Setting run-time option \"tmax_diag_file\" to %0s .",diag_file);
       end 
       else begin
         `ifdef tmax_diag_file 
         diag_file = `tmax_diag_file;
         `else  diag_file = "c17Tb.v.diag"; 
         `endif 
       end
       diagf = $fopen(diag_file);
       if (diagf == 0) begin
         $display("XTB Error: Unable to open diagnosis file %s (for writing). Exiting...", diag_file);
         $finish; 
       end
       if (verbose >= 1) $display("XTB: User requesting TetraMAX compliant diagnosis file: %0s", diag_file);
       $fdisplay(diagf, "// Serial scan error:       <pat#> \t<pin_name> \t<shift_index> \t(<expected_value> <simulated_value>)");
       $fdisplay(diagf, "// USF Parallel scan error: <pat#> \t<pin_name> \t<shift_index> \t(<expected_value> <simulated_value>)");
       $fdisplay(diagf, "// DSF Parallel scan error: <pat#> \t<chain_name> \t<cell_index> \t(<expected_value> <simulated_value>)");
       $fdisplay(diagf, "// Capture error:           <pat#> \t<pin_name> \t(<expected_value> <simulated_value>)");
       $fdisplay(diagf, "// Cycle based error:          C \t<pin_name> \t<vect_nbr> \t(<expected_value> <simulated_value>)\n\n");

     end 

     memel = memall[data_i]; 
     total_pats = memel[31:0];
     data_i=data_i+1;

     last_pat = -1;

     n_pat_sim = -1;

     start_pat = -1;

     if (total_pats < 0 || |(total_pats) === 1'bx) begin
       $display("XTB Error: Inconsistent total number of patterns (%d). Exiting...",  total_pats);
       $finish;
     end

     if (verbose >= 1) $display("XTB: Total number of patterns  %0d",  total_pats); 
     if (last_pat == -1) last_pat = total_pats - 1;

     `ifdef tmax_n_pattern_sim
     last_pat=`tmax_n_pattern_sim;
     n_pat_sim=`tmax_n_pattern_sim;
     `endif

     `ifdef tmax_test_setup_only_once
     test_setup_only_once = 1;
     `endif

     xtb_sim_mode = 0;
     `ifdef tmax_parallel
       $display("XTB Warning: User requesting parallel load mode simulation but test bench supports serial load mode only. Performing full serial shift...");
     `endif

     if (SSHIFTS < 0) begin
       $display("XTB Error: Passing negative value (%0d) of serial shifts in parallel mode. Exiting...",  SSHIFTS);
       $finish; 
     end

     `ifdef tmax_serial_timing 
       sertmg = 1;
       if (xtb_sim_mode == 1) $display("XTB: Parallel simulation (timing and vector) extended to match serial simulation");
     `else 
       sertmg = 0; 
     `endif


     $display("XTB: Starting %0s simulation of %0d pattern%s", xtb_sim_mode == 0 ? "serial" : "parallel", last_pat + 1, (last_pat>0)?"s":"");
     if (xtb_sim_mode) begin 
       $display("XTB: Using %0d serial shifts", SSHIFTS);
     end

     if (SSHIFTS >= MAXCHLEN)  begin 
       $display("XTB Warning: serial shifts (%0d) equals or exceeds max chain length (%0d). Performing full serial scan... ", SSHIFTS, MAXCHLEN); 
       xtb_sim_mode = 0;	
     end 

     if (diagm==2 && xtb_sim_mode==1)  begin 
       $display("XTB Warning: cannot display cycle-based diagnostic messages in parallel load mode simulation. Simulation will display pattern-based diagnostic messages."); 
       diagm = 1;	
     end 

     while (cur_pat <= last_pat && end_pat != 1) begin 
       memel = memall[data_i];
       opcode = memel[15:0];
       cur_stmt = -1;
       args = 'b0;
       case (opcode)
         'd`EndPat:  begin
                       cur_stmt = `EndPat;
                       end_pat = 1;
                     end
         'd`IncPat:  begin
                       cur_stmt = `IncPat;
                       cur_pat = cur_pat + 1;
                       v_count_per_pat = 0;
                       nbpats = nbpats+1;

                     end
         'd`SetLastReseed:  begin
                       cur_stmt = `SetLastReseed;
                       `ifdef tmax_fast_reseed
                       set_last_reseed = memel[17:16];
                       `else
                       set_last_reseed = 1;
                       `endif
                     end
         'd`SetValidStrobe:  begin
                       cur_stmt = `SetValidStrobe;
                     end
         'd`SetForceSI:  begin
                       cur_stmt = `SetForceSI;
                     end
         'd`SetPat:  begin
                       cur_stmt = `SetPat;
                       v_count_per_pat = 0;
                       if (cur_pat==-1) begin first_pat = memel[43:16]; cur_pat = first_pat; end
                       else cur_pat = memel[43:16];
                       if (start_pat==-1) start_pat = memel[43:16];
                       last_pat = last_pat + cur_pat; 
                       if (n_pat_sim>0) last_pat = start_pat+n_pat_sim;
                       nbpats = nbpats+1;  
                     end
         'd`WFTStmt: begin
                       cur_stmt = `WFTStmt;
                       resolve_wft(memel[17:16]);
                     end 
         'd`ConditionStmt, 'd`FixedStmt, 'd`VectorStmt: begin
           if (opcode == 'd`ConditionStmt) cur_stmt = 'd`ConditionStmt;
           else 	cur_stmt='d`VectorStmt;
           nargs = memel[19:16];
           na = 0;
           while (na<nargs) begin
             data_i = data_i + 1;
             memel = memall[data_i];
             assign_val(memel[SIG_IDS_W-1:0], memel[2*MAX_WIDTH+SIG_IDS_W-1:SIG_IDS_W]);
             na = na + 1;
           end
           if (opcode == `VectorStmt) assign_stmt(the_wft_id);
          end 
          'd`GenLoopStmt: begin: GenLoop_BLOCK
            cur_stmt = `GenLoopStmt;
            lp_count = 1;
            lp_addr = data_i;
            lp_max = memel[31:16];
            $display("\nXTB: starting loop statement with %0d iterations", lp_max); 
          end 
          'd`EndGenLoopStmt: begin: EndLoop_BLOCK
            cur_stmt = `EndGenLoopStmt;
            $display("\nXTB: loop iteration %0d/%0d done.", lp_count, lp_max);
            lp_count = lp_count+1;
            if (lp_count <= lp_max) begin
              data_i = lp_addr;
            end 
         end 
         'd`test_setupStmt: begin: test_setup_BLOCK
           cur_stmt = `test_setupStmt;
           set_args(memel[19:16]);
             test_setup(sid_args, sval_args);
         end 
         'd`multiclock_captureStmt: begin: multiclock_capture_BLOCK
           cur_stmt = `multiclock_captureStmt;
           set_args(memel[19:16]);
             multiclock_capture(sid_args, sval_args);
         end 
         default: begin $display("\nXTB Error: Unrecognized code %0h, @ inst %0d", opcode, data_i); $finish; end 
       endcase 
       data_i = data_i + 1;
       popcode = opcode;
       if (verbose >= 3) display_stmt(cur_stmt);
     end 
     $display("XTB: Simulation of %0d pattern%s completed with %0d mismatch%s (time: %0t, cycles: %0d)\n", nbpats+end_pat-1, (nbpats==1)?"":"s", nbfails, (nbfails==1)?"":"es", $time, v_count); 

     if (diagf) $fclose(diagf);
     ->end_part;
   end 


   task init_rtops;
     integer i;
   begin
     for (i=0; i<`NBRTOPS; i=i+1)
       rt_ops[i] = -1;
     RT_OPS [4] = "tmax_n_pattern_sim";
     RT_OPS [0] = "tmax_msg";
     RT_OPS [1] = "tmax_rpt";
     RT_OPS [2] = "tmax_diag_file";
     RT_OPS [3] = "tmax_n_error_stop";
   end 
   endtask

   task process_rtops;
     integer sim_op, p_mode;
     integer i, r;
   begin
     sim_op = -1;
     init_rtops;
     for (i=0; i<`NBRTOPS; i=i+1)
       r = $value$plusargs ({RT_OPS[i], "=%d"}, rt_ops[i]);
     if ((rt_ops[4] > -1)) begin last_pat = rt_ops[4]; n_pat_sim = rt_ops[4]; end
     if (last_pat != total_pats-1) begin
       display_ops ((rt_ops[4] > 0), last_pat, RT_OPS[4]);
       $display("XTB: User requesting simulation of first %0d patterns", last_pat);
     end 
     if (last_pat >= total_pats && total_pats > 1) begin
       $display("XTB Warning: Requested simulation patterns (%0d) exceeds total pattern count (%0d). Adjusting...", last_pat+1, total_pats);
       last_pat = total_pats-1;
     end 
     else if (last_pat < 0 && total_pats != 0)  begin 
       $display("XTB Error: User requesting simulating wrong number of patterns (%0d). Exiting... ", last_pat+1);
       $finish;
     end
     if (rt_ops[0] > -1) begin
       verbose = rt_ops[0];
     end
     if (verbose != 0) 
       display_ops ((rt_ops[0]>-1), verbose, RT_OPS[0]);
     if (rt_ops[1] > -1) begin
       rep_pat =  rt_ops[1];
     end
     if (rep_pat != 5) 
       display_ops ((rt_ops[1]>-1), rep_pat, RT_OPS[1]);
   end 
   endtask

   task display_ops;
     input reg rt;
     input integer val;
     input reg [32*8:1] opname;
   begin
     $display("XTB: Setting %0s option \"%0s\" to %0d.", (rt==1)?"runtime":"compile-time",  opname, val);
   end 
   endtask

   task display_help;
   integer op;
   begin
     init_rtops;
     $display("\n\n\t\t----------------------- Runtime Help ------------------------------\n");
     $display("XTB: Usage is: <sim_exec> +opt1=val1 +opt2=val2...");
     $display("     where  <sim_exec> is the simulation exec name, and opt1 opt2 are available options and val1, val2 their corresponding values.");
     $display("     Available runtime options are:");
     op = 0;
     while (op < `NBRTOPS) begin
       $display("        +%0s", RT_OPS[op]);
       op = op + 1;
     end
     $display("\n      E.g.: simv +tmax_serial=2 +tmax_msg=2, runs first 2 patterns in serial and remaining in parallel, and set the verbose msg level to 2.");
     $display("\n Note: Runtime options override corresponding compile-time options.");
     $display("\n       Please refer to the User's Guide for details regarding each option.");
     $display("\n\t\t-------------------------------------------------------------------\n");
   end 
   endtask

   task check_max_error_limit;
     begin
     if( rt_ops[3] > -1 && nbfails == rt_ops[3])    finish_at_max_error;
   end
     endtask

   task finish_at_max_error;
     begin
     $display("XTB: Simulation of %0d pattern%s completed with %0d mismatch%s (time: %0t, cycles: %0d)\n", cur_pat-first_pat+1, (cur_pat-first_pat+1==1)?"":"s", nbfails, (nbfails==1)?"":"es", $time, v_count); 
     $finish(0);
     end
     endtask


   initial begin: _burst__pattern__init_unit

     `ifdef tmax_fsdb
       $fsdbDumpvars;
     `endif


     for (n=0; n<SIG_IDS; n=n+1) SignalIDWidth[n] = 0;
     SignalIDName[0] = "N1";
     SignalIDType[0] = 0; //N1
     SignalIDWidth[0] = 1; //N1
     SignalIDName[1] = "N2";
     SignalIDType[1] = 0; //N2
     SignalIDWidth[1] = 1; //N2
     SignalIDName[2] = "N3";
     SignalIDType[2] = 0; //N3
     SignalIDWidth[2] = 1; //N3
     SignalIDName[3] = "N6";
     SignalIDType[3] = 0; //N6
     SignalIDWidth[3] = 1; //N6
     SignalIDName[4] = "N7";
     SignalIDType[4] = 0; //N7
     SignalIDWidth[4] = 1; //N7
     SignalIDName[5] = "si";
     SignalIDType[5] = 0; //si
     SignalIDWidth[5] = 1; //si
     SignalIDName[6] = "se";
     SignalIDType[6] = 0; //se
     SignalIDWidth[6] = 1; //se
     SignalIDName[7] = "N22";
     SignalIDType[7] = 1; //N22
     SignalIDWidth[7] = 1; //N22
     SignalIDName[8] = "N23";
     SignalIDType[8] = 1; //N23
     SignalIDWidth[8] = 1; //N23
     SignalIDName[9] = "so";
     SignalIDType[9] = 1; //so
     SignalIDWidth[9] = 1; //so
     SignalIDName[10] = "_pi";
     SignalIDType[10] = 3; //_pi
     SignalIDWidth[10] = 7; //_pi
     SignalIDName[11] = "_po";
     SignalIDType[11] = 3; //_po
     SignalIDWidth[11] = 3; //_po
     WFTIDName[0] = "_multiclock_capture_WFT_";
     WFTIDName[1] = "_default_WFT_";
     StmtNames[0] = "SetLastReseed";
     StmtNames[1] = "EndPat";
     StmtNames[2] = "IncPat";
     StmtNames[3] = "SetPat";
     StmtNames[4] = "WFTStmt";
     StmtNames[5] = "ConditionStmt";
     StmtNames[6] = "VectorStmt";
     StmtNames[7] = "FixedStmt";
     StmtNames[8] = "GenLoopStmt";
     StmtNames[9] = "EndGenLoopStmt";
     StmtNames[10] = "GenTestSetupStmt";
     StmtNames[11] = "EndGenTestSetupStmt";
     StmtNames[12] = "SetForceSI";
     StmtNames[13] = "SetValidStrobe";
     StmtNames[14] = "AnnotationStmt";
     StmtNames[15] = "SetWPack";
     StmtNames[16] = "SetRPack";
     StmtNames[17] = "test_setupStmt";
     StmtNames[18] = "multiclock_captureStmt";

     $display("%s",`MAXTB_H_S);
     $display("%s",`MAXTB_HEADER);
     $display("%s\n",`MAXTB_H_S);


     $timeformat(-9,2," ns",19);

     `ifdef tmax_test_data_file 
       tdfm = 1;
       TDATA_FILE = `tmax_test_data_file ;
     `else
       tdfm = 0;
       TDATA_FILE = `TDATA_FILE ;
     `endif


     `ifdef tmax_diag_file 
       diagm = 1;
       diag_file = `tmax_diag_file ;
     `else
       tdfm = 0;
       diag_file = "" ;
     `endif

     `ifdef tmax_vcde
       $display("XTB: Dumping Extended VCD information in file \"c17Tb.v.vcd\"");
       $dumpports(`XTB_DUT_HIER, "c17Tb.v.vcd");
     `endif

     `ifdef tmax_msg
       verbose = `tmax_msg ;
     `else
       verbose = 0 ;
     `endif

     `ifdef tmax_debug
     if (~(`tmax_debug & 1'b1) == 1'b0)
       debug = 1;
     else
       debug = `tmax_debug + 0 ;
     `else
     debug = 0 ;
     `endif

     `ifdef tmax_rpt
     rep_pat = `tmax_rpt ;
     `else
     rep_pat = 5 ;
     `endif

     test_setup_runs = 0;

     set_last_reseed = 1;

     diagm = 0;
     diag_file = "";

     `ifdef tmax_diag 
       diagm = `tmax_diag;
     `endif

     -> start_part;
     @(end_part) #0;
     $finish(0);

   end

 endmodule
