// MAX TB Test Protocol File, generated by MAX TB Version U-2022.12
// Sun May 26 17:15:21 2024
// Module under test: c432
// Generated from original STIL file : "/remote/us01home60/dahal/demo_setup/c17/c432_patt.stil"
// STIL file version: "1.0"
// Enhanced Runtime Version: use <sim_exec> +tmax_help for available runtime options
// Simulation mode: default parallel simulation

`define TDATA_FILE "/remote/us01home60/dahal/demo_setup/c17/c432Tb.dat"
`ifndef XTB_DUT_HIER 
  `define XTB_DUT_HIER dut
`endif
`timescale 1ns/1ns

// OPCODE DEFINITION
`define SetLastReseed 0
`define EndPat 1
`define IncPat 2
`define SetPat 3
`define WFTStmt 4
`define ConditionStmt 5
`define VectorStmt 6
`define FixedStmt 7
`define GenLoopStmt 8
`define EndGenLoopStmt 9
`define GenTestSetupStmt 10
`define EndGenTestSetupStmt 11
`define SetForceSI 12
`define SetValidStrobe 13
`define AnnotationStmt 14
`define SetWPack 15
`define SetRPack 16
`define test_setupStmt 17
`define load_unloadStmt 18
`define multiclock_captureStmt 19

// SIGS DEFINITION
`define clk 0
`define reset 1
`define N1_wire 2
`define N4_wire 3
`define N8_wire 4
`define N11_wire 5
`define N14_wire 6
`define N17_wire 7
`define N21_wire 8
`define N24_wire 9
`define N27_wire 10
`define N30_wire 11
`define N34_wire 12
`define N37_wire 13
`define N40_wire 14
`define N43_wire 15
`define N47_wire 16
`define N50_wire 17
`define N53_wire 18
`define N56_wire 19
`define N60_wire 20
`define N63_wire 21
`define N66_wire 22
`define N69_wire 23
`define N73_wire 24
`define N76_wire 25
`define N79_wire 26
`define N82_wire 27
`define N86_wire 28
`define N89_wire 29
`define N92_wire 30
`define N95_wire 31
`define N99_wire 32
`define N102_wire 33
`define N105_wire 34
`define N108_wire 35
`define N112_wire 36
`define N115_wire 37
`define si 38
`define se 39
`define N223 40
`define N329 41
`define N370 42
`define N421 43
`define N430 44
`define N431 45
`define N432 46
`define so 47
`define _pi 48
`define all_inputs 49
`define _po 50
`define _si 51
`define all_outputs 52
`define _clk 53
`define _so 54

// WFTS DEFINITION
`define _multiclock_capture_WFT_ 0
`define _default_WFT_ 1
`define MAX_PART 0

`define MAXTB_HEADER " MAX TB Version U-2022.12\n Test Protocol File generated from original file \"/remote/us01home60/dahal/demo_setup/c17/c432_patt.stil\"\n STIL file version: 1.0"
`define MAXTB_H_S "#############################################################################"


module /* maxtb */ c432_test ();
   parameter NSTMTS = 20; // number of all stmts
   parameter DFSHIFTS = 0; // (default) number of serial shifts in parallel scan mode
   parameter NAMELENGTH = 200; // max length of names reported in fails
   parameter FILELENGTH = 1024; // max length for file names 
   parameter MAXCHLEN = 43, NCHAINS = 1;
   parameter NINPUTS = 40, NOUTPUTS = 8, CUM_WIDTH=148;
   parameter NSIS = 1, NSOUTS = 1;
   parameter WFT_IDS = 2, SIG_IDS = 55, SIG_IDS_W = 6, MAX_WIDTH = 40, MAX_SIGW = 1;
   parameter PARSERINC = 43; 
   parameter SYNC_LATENCY = 3; 
   parameter PRTIME = 0.000000; 
   integer xtb_sim_mode; // simulation modes: xtb_sim_mode=0 -> serial, xtb_sim_mode=1 -> parallel (default);
   integer nbfails, abit, cbit;
   integer prev_error; // flag for tracking displayed error banner
   integer loads;        // number of load_unloads for current pattern
   integer prev_pat;     // previous pattern number;
   integer rep_pat; // report pattern progress every Nth pattern
   integer verbose;      // message verbosity level
   integer debug;      // enable debug level
   integer test_setup_runs; // counts the number of executed test_setups
   integer test_setup_only_once; // flag to trigger only one execution of test_setup
   integer data_i, n, cur_pat, start_pat, end_pat, last_pat, total_pats, csci, fsci, cur_stmt, n_pat_sim;
   integer v_count, v_count_per_pat;  // track the cycle count and cycle/pattern count (helpful for the simulator GUI)
   integer v_count_per_stmt;  // track the cycle count per statement (procedure or macro)
   integer SSHIFTS;
   integer diagf, diagm;
   integer sertmg;
   integer the_wft_id, wft_id_s;
   integer ser_pats;
   integer first_pat;
   event start_part, end_part;
   event error_ev;
   `define NBRTOPS 9
   integer csim_op;
   reg [32*8:1] RT_OPS [0:`NBRTOPS];
   integer      rt_ops [0:`NBRTOPS-1];
   integer      tdfm;
   integer lp_addr, lp_count, lp_max;
   reg [0:(8*FILELENGTH)-1] TDATA_FILE;

   reg [MAX_SIGW*(NINPUTS+NOUTPUTS)-1:0] ALLINSIGS, ALLOUTSIGS;
   reg [MAX_SIGW*(NINPUTS+NOUTPUTS)-1:0] TMPINSIGS_V,TMPINSIGS_T,TMPINSIGS_V_S,TMPINSIGS_T_S;
   reg [MAX_SIGW*(NINPUTS+NOUTPUTS)-1:0] TMPOUTSIGS_V,TMPOUTSIGS_T,TMPOUTSIGS_V_S,TMPOUTSIGS_T_S;
   reg [NINPUTS+NOUTPUTS-1:0] ALLINSIGIDS, ALLOUTSIGIDS, ALLINSIGIDS_S, ALLOUTSIGIDS_S;
   reg [NSTMTS-1:0] opcode, popcode;
   event force_scells;
   event strobe_scells;
   event release_scells;
   reg [85:0] memel, memall [1:447];
   reg [0:(8*NAMELENGTH)-1] CH_NAMES [0:NCHAINS-1];
   reg [0:(8*NAMELENGTH)-1] CH_PINS [0:NCHAINS-1];
   reg [0:MAXCHLEN-1] LOD, LOAD[0:NCHAINS-1];
   reg [0:MAXCHLEN-1] UNL, UNLOAD[0:NCHAINS-1];
   reg [0:MAXCHLEN-1] UNLM;
   reg [0:MAXCHLEN-1] SERIALM;
   reg [0:MAXCHLEN-1] CH_INPINV[0:NCHAINS-1], CH_OUTINV[0:NCHAINS-1];
   reg [0:MAXCHLEN-1] CT_OUTINV[0:NCHAINS-1];
   wire [0:NCHAINS-1] SCANOUT;
   reg [0:MAXCHLEN-1] CHOUT, CHAINOUT[0:NCHAINS-1];
   reg [0:MAXCHLEN-1] CHAINOUT0;
   reg [0:MAXCHLEN-1] LOD0;
   integer set_last_reseed;
   reg strobe_en;
   reg [SIG_IDS-1:0] sid_args ;
   reg [2*CUM_WIDTH-1:0] sval_args;
   reg [5:0] the_sids [0:SIG_IDS-1];
   reg [8*NAMELENGTH-1:0]  SignalIDName [0:54];
   reg [2:0]  SignalIDType [0:54];
   reg [5:0]  SignalIDWidth [0:54];
   reg [(8*NAMELENGTH-1):0]  WFTIDName [0:1];
   reg [0:(8*FILELENGTH)-1] diag_file;
   reg [0:(8*NAMELENGTH-1)] StmtNames [0:NSTMTS];

   reg clk_con ;
   reg reset_con ;
   reg N1_wire_con ;
   reg N4_wire_con ;
   reg N8_wire_con ;
   reg N11_wire_con ;
   reg N14_wire_con ;
   reg N17_wire_con ;
   reg N21_wire_con ;
   reg N24_wire_con ;
   reg N27_wire_con ;
   reg N30_wire_con ;
   reg N34_wire_con ;
   reg N37_wire_con ;
   reg N40_wire_con ;
   reg N43_wire_con ;
   reg N47_wire_con ;
   reg N50_wire_con ;
   reg N53_wire_con ;
   reg N56_wire_con ;
   reg N60_wire_con ;
   reg N63_wire_con ;
   reg N66_wire_con ;
   reg N69_wire_con ;
   reg N73_wire_con ;
   reg N76_wire_con ;
   reg N79_wire_con ;
   reg N82_wire_con ;
   reg N86_wire_con ;
   reg N89_wire_con ;
   reg N92_wire_con ;
   reg N95_wire_con ;
   reg N99_wire_con ;
   reg N102_wire_con ;
   reg N105_wire_con ;
   reg N108_wire_con ;
   reg N112_wire_con ;
   reg N115_wire_con ;
   reg si_con ;
   reg se_con ;
   wire N223_con ;
   wire N329_con ;
   wire N370_con ;
   wire N421_con ;
   wire N430_con ;
   wire N431_con ;
   wire N432_con ;
   wire so_con ;

   wire [0:(8*NAMELENGTH-1)] cur_StmtName;
   assign cur_StmtName = StmtNames[cur_stmt] ;


   c432 dut ( 
     .clk ( clk_con ),
     .reset ( reset_con ),
     .N1_wire ( N1_wire_con ),
     .N4_wire ( N4_wire_con ),
     .N8_wire ( N8_wire_con ),
     .N11_wire ( N11_wire_con ),
     .N14_wire ( N14_wire_con ),
     .N17_wire ( N17_wire_con ),
     .N21_wire ( N21_wire_con ),
     .N24_wire ( N24_wire_con ),
     .N27_wire ( N27_wire_con ),
     .N30_wire ( N30_wire_con ),
     .N34_wire ( N34_wire_con ),
     .N37_wire ( N37_wire_con ),
     .N40_wire ( N40_wire_con ),
     .N43_wire ( N43_wire_con ),
     .N47_wire ( N47_wire_con ),
     .N50_wire ( N50_wire_con ),
     .N53_wire ( N53_wire_con ),
     .N56_wire ( N56_wire_con ),
     .N60_wire ( N60_wire_con ),
     .N63_wire ( N63_wire_con ),
     .N66_wire ( N66_wire_con ),
     .N69_wire ( N69_wire_con ),
     .N73_wire ( N73_wire_con ),
     .N76_wire ( N76_wire_con ),
     .N79_wire ( N79_wire_con ),
     .N82_wire ( N82_wire_con ),
     .N86_wire ( N86_wire_con ),
     .N89_wire ( N89_wire_con ),
     .N92_wire ( N92_wire_con ),
     .N95_wire ( N95_wire_con ),
     .N99_wire ( N99_wire_con ),
     .N102_wire ( N102_wire_con ),
     .N105_wire ( N105_wire_con ),
     .N108_wire ( N108_wire_con ),
     .N112_wire ( N112_wire_con ),
     .N115_wire ( N115_wire_con ),
     .si ( si_con ),
     .se ( se_con ),
     .N223 ( N223_con ),
     .N329 ( N329_con ),
     .N370 ( N370_con ),
     .N421 ( N421_con ),
     .N430 ( N430_con ),
     .N431 ( N431_con ),
     .N432 ( N432_con ),
     .so ( so_con )
  );


   task save_context;
     begin
       wft_id_s = the_wft_id;
       TMPINSIGS_V_S = TMPINSIGS_V;
       TMPOUTSIGS_V_S = TMPOUTSIGS_V;
       TMPINSIGS_T_S = TMPINSIGS_T;
       TMPOUTSIGS_T_S = TMPOUTSIGS_T;
       ALLOUTSIGIDS_S = ALLOUTSIGIDS;
       ALLINSIGIDS_S = ALLINSIGIDS;
     end
   endtask 

   task restore_context;
     begin
       the_wft_id = wft_id_s;
       TMPINSIGS_V = TMPINSIGS_V_S;
       TMPOUTSIGS_V = TMPOUTSIGS_V_S;
       TMPINSIGS_T = TMPINSIGS_T_S;
       TMPOUTSIGS_T = TMPOUTSIGS_T_S;
       ALLOUTSIGIDS = ALLOUTSIGIDS_S;
       ALLINSIGIDS = ALLINSIGIDS_S;
     end
   endtask 

   task resolve_signal;
     input reg [5:0] sid;
   begin
     if (SignalIDType[sid] != 3) the_sids[0] = sid;
     else begin
       case (sid)
         'd48: begin // _pi
                 the_sids[39] = 33; the_sids[38] = 34; the_sids[37] = 35; the_sids[36] = 36; the_sids[35] = 37; the_sids[34] = 5; the_sids[33] = 6; the_sids[32] = 7; the_sids[31] = 2; the_sids[30] = 8; the_sids[29] = 9; the_sids[28] = 10; the_sids[27] = 11; the_sids[26] = 12; the_sids[25] = 13; the_sids[24] = 14; the_sids[23] = 15; the_sids[22] = 16; the_sids[21] = 3; the_sids[20] = 17; the_sids[19] = 18; the_sids[18] = 19; the_sids[17] = 20; the_sids[16] = 21; the_sids[15] = 22; the_sids[14] = 23; the_sids[13] = 24; the_sids[12] = 25; the_sids[11] = 26; the_sids[10] = 27; the_sids[9] = 28; the_sids[8] = 29; the_sids[7] = 4; the_sids[6] = 30; the_sids[5] = 31; the_sids[4] = 32; the_sids[3] = 0; the_sids[2] = 1; the_sids[1] = 38;
                 the_sids[0] = 39;
               end
         'd49: begin // all_inputs
                 the_sids[39] = 33; the_sids[38] = 34; the_sids[37] = 35; the_sids[36] = 36; the_sids[35] = 37; the_sids[34] = 5; the_sids[33] = 6; the_sids[32] = 7; the_sids[31] = 2; the_sids[30] = 8; the_sids[29] = 9; the_sids[28] = 10; the_sids[27] = 11; the_sids[26] = 12; the_sids[25] = 13; the_sids[24] = 14; the_sids[23] = 15; the_sids[22] = 16; the_sids[21] = 3; the_sids[20] = 17; the_sids[19] = 18; the_sids[18] = 19; the_sids[17] = 20; the_sids[16] = 21; the_sids[15] = 22; the_sids[14] = 23; the_sids[13] = 24; the_sids[12] = 25; the_sids[11] = 26; the_sids[10] = 27; the_sids[9] = 28; the_sids[8] = 29; the_sids[7] = 4; the_sids[6] = 30; the_sids[5] = 31; the_sids[4] = 32; the_sids[3] = 0; the_sids[2] = 1; the_sids[1] = 38;
                 the_sids[0] = 39;
               end
         'd50: begin // _po
                 the_sids[7] = 40; the_sids[6] = 41; the_sids[5] = 42; the_sids[4] = 43; the_sids[3] = 44; the_sids[2] = 45; the_sids[1] = 46;
                 the_sids[0] = 47;
               end
         'd51: begin // _si
                
                 the_sids[0] = 38;
               end
         'd52: begin // all_outputs
                 the_sids[7] = 40; the_sids[6] = 41; the_sids[5] = 42; the_sids[4] = 43; the_sids[3] = 44; the_sids[2] = 45; the_sids[1] = 46;
                 the_sids[0] = 47;
               end
         'd53: begin // _clk
                 the_sids[1] = 0;
                 the_sids[0] = 1;
               end
         'd54: begin // _so
                
                 the_sids[0] = 47;
               end
          default: begin $display("\nXTB Error: unrecognized signal id %d (valid range is 0..%d). Exiting...",sid, SIG_IDS); $finish; end
       endcase
     end
   end
   endtask

   task get_stb_sig;
     input reg [5:0] sid ;
     output reg [MAX_WIDTH-1:0] strsig;
   begin
     case (sid)
       'd40:	strsig[0:0] = 	N223_con ;
       'd41:	strsig[0:0] = 	N329_con ;
       'd42:	strsig[0:0] = 	N370_con ;
       'd43:	strsig[0:0] = 	N421_con ;
       'd44:	strsig[0:0] = 	N430_con ;
       'd45:	strsig[0:0] = 	N431_con ;
       'd46:	strsig[0:0] = 	N432_con ;
       'd47:	strsig[0:0] = 	so_con ;
       default: begin $display("\nXTB Error: unrecognized output signal id %d. Exiting...",sid); $finish; end
     endcase
   end
   endtask

   task set_force_sig;
     input reg [SIG_IDS-1:0] sid ;
   begin
     case (sid)
       'd0: clk_con 	= ALLINSIGS[sid];
       'd1: reset_con 	= ALLINSIGS[sid];
       'd2: N1_wire_con 	= ALLINSIGS[sid];
       'd3: N4_wire_con 	= ALLINSIGS[sid];
       'd4: N8_wire_con 	= ALLINSIGS[sid];
       'd5: N11_wire_con 	= ALLINSIGS[sid];
       'd6: N14_wire_con 	= ALLINSIGS[sid];
       'd7: N17_wire_con 	= ALLINSIGS[sid];
       'd8: N21_wire_con 	= ALLINSIGS[sid];
       'd9: N24_wire_con 	= ALLINSIGS[sid];
       'd10: N27_wire_con 	= ALLINSIGS[sid];
       'd11: N30_wire_con 	= ALLINSIGS[sid];
       'd12: N34_wire_con 	= ALLINSIGS[sid];
       'd13: N37_wire_con 	= ALLINSIGS[sid];
       'd14: N40_wire_con 	= ALLINSIGS[sid];
       'd15: N43_wire_con 	= ALLINSIGS[sid];
       'd16: N47_wire_con 	= ALLINSIGS[sid];
       'd17: N50_wire_con 	= ALLINSIGS[sid];
       'd18: N53_wire_con 	= ALLINSIGS[sid];
       'd19: N56_wire_con 	= ALLINSIGS[sid];
       'd20: N60_wire_con 	= ALLINSIGS[sid];
       'd21: N63_wire_con 	= ALLINSIGS[sid];
       'd22: N66_wire_con 	= ALLINSIGS[sid];
       'd23: N69_wire_con 	= ALLINSIGS[sid];
       'd24: N73_wire_con 	= ALLINSIGS[sid];
       'd25: N76_wire_con 	= ALLINSIGS[sid];
       'd26: N79_wire_con 	= ALLINSIGS[sid];
       'd27: N82_wire_con 	= ALLINSIGS[sid];
       'd28: N86_wire_con 	= ALLINSIGS[sid];
       'd29: N89_wire_con 	= ALLINSIGS[sid];
       'd30: N92_wire_con 	= ALLINSIGS[sid];
       'd31: N95_wire_con 	= ALLINSIGS[sid];
       'd32: N99_wire_con 	= ALLINSIGS[sid];
       'd33: N102_wire_con 	= ALLINSIGS[sid];
       'd34: N105_wire_con 	= ALLINSIGS[sid];
       'd35: N108_wire_con 	= ALLINSIGS[sid];
       'd36: N112_wire_con 	= ALLINSIGS[sid];
       'd37: N115_wire_con 	= ALLINSIGS[sid];
       'd38: si_con 	= ALLINSIGS[sid];
       'd39: se_con 	= ALLINSIGS[sid];
       default: begin $display("\nXTB Error: unrecognized (input) signal id %d (valid range is 0..%d). Exiting...",sid, SIG_IDS-1); $finish; end
     endcase
   end
   endtask 

   always  begin: force_sigs_p
     reg [SIG_IDS-1:0] sid; 
     reg [MAX_SIGW-1:0] sig;
     fork
        forever @(ALLINSIGS[0]) set_force_sig('d`clk );
        forever @(ALLINSIGS[1]) set_force_sig('d`reset );
        forever @(ALLINSIGS[2]) set_force_sig('d`N1_wire );
        forever @(ALLINSIGS[3]) set_force_sig('d`N4_wire );
        forever @(ALLINSIGS[4]) set_force_sig('d`N8_wire );
        forever @(ALLINSIGS[5]) set_force_sig('d`N11_wire );
        forever @(ALLINSIGS[6]) set_force_sig('d`N14_wire );
        forever @(ALLINSIGS[7]) set_force_sig('d`N17_wire );
        forever @(ALLINSIGS[8]) set_force_sig('d`N21_wire );
        forever @(ALLINSIGS[9]) set_force_sig('d`N24_wire );
        forever @(ALLINSIGS[10]) set_force_sig('d`N27_wire );
        forever @(ALLINSIGS[11]) set_force_sig('d`N30_wire );
        forever @(ALLINSIGS[12]) set_force_sig('d`N34_wire );
        forever @(ALLINSIGS[13]) set_force_sig('d`N37_wire );
        forever @(ALLINSIGS[14]) set_force_sig('d`N40_wire );
        forever @(ALLINSIGS[15]) set_force_sig('d`N43_wire );
        forever @(ALLINSIGS[16]) set_force_sig('d`N47_wire );
        forever @(ALLINSIGS[17]) set_force_sig('d`N50_wire );
        forever @(ALLINSIGS[18]) set_force_sig('d`N53_wire );
        forever @(ALLINSIGS[19]) set_force_sig('d`N56_wire );
        forever @(ALLINSIGS[20]) set_force_sig('d`N60_wire );
        forever @(ALLINSIGS[21]) set_force_sig('d`N63_wire );
        forever @(ALLINSIGS[22]) set_force_sig('d`N66_wire );
        forever @(ALLINSIGS[23]) set_force_sig('d`N69_wire );
        forever @(ALLINSIGS[24]) set_force_sig('d`N73_wire );
        forever @(ALLINSIGS[25]) set_force_sig('d`N76_wire );
        forever @(ALLINSIGS[26]) set_force_sig('d`N79_wire );
        forever @(ALLINSIGS[27]) set_force_sig('d`N82_wire );
        forever @(ALLINSIGS[28]) set_force_sig('d`N86_wire );
        forever @(ALLINSIGS[29]) set_force_sig('d`N89_wire );
        forever @(ALLINSIGS[30]) set_force_sig('d`N92_wire );
        forever @(ALLINSIGS[31]) set_force_sig('d`N95_wire );
        forever @(ALLINSIGS[32]) set_force_sig('d`N99_wire );
        forever @(ALLINSIGS[33]) set_force_sig('d`N102_wire );
        forever @(ALLINSIGS[34]) set_force_sig('d`N105_wire );
        forever @(ALLINSIGS[35]) set_force_sig('d`N108_wire );
        forever @(ALLINSIGS[36]) set_force_sig('d`N112_wire );
        forever @(ALLINSIGS[37]) set_force_sig('d`N115_wire );
        forever @(ALLINSIGS[38]) set_force_sig('d`si );
        forever @(ALLINSIGS[39]) set_force_sig('d`se );
     join
   end

   task measure_out_sig;
     input reg [SIG_IDS-1:0] sid ;
     input integer  stmtid;
     reg [MAX_WIDTH-1:0] xsig;
     reg [MAX_WIDTH-1:0] csig;
     integer errshown, abit, cpat;
   begin
     errshown = 0;
     cpat = cur_pat < 0 ? 0 : cur_pat;
     get_stb_sig(sid,csig);
     xsig = ALLOUTSIGS[sid ];
     for (abit = 0; abit < SignalIDWidth[sid]; abit = abit + 1) begin
       if (xsig[abit] !== 1'bx) begin
         if (xsig[abit] !== csig[abit]) begin
           if (errshown == 0) $display(">>>  Error during %0s pattern %0d", StmtNames[stmtid], cpat);
           if (SignalIDWidth[sid] <= 1) begin 
             $display(">>>  \tAt T=%0t, V=%0d, exp=%b, got=%b, signal %0s", $time, v_count, xsig[abit], csig[abit], SignalIDName[sid]);
             if (diagf) begin 
               if (diagm==2) $fdisplay(diagf, "  C %0s %0d (exp=%b, got=%b)", SignalIDName[sid], v_count, xsig[abit], csig[abit]);
               else $fdisplay(diagf, "  %0d %0s (exp=%b, got=%b)", cpat, SignalIDName[sid], xsig[abit], csig[abit]);
             end 
           end 
           else begin 
             $display(">>>  \tAt T=%0t, V=%0d, exp=%b, got=%b, signal %0s[%0d]", $time, v_count, xsig[abit], csig[abit], SignalIDName[sid], abit);
             if (diagf) begin 
               if (diagm==2) $fdisplay(diagf, "  C %0s[%0d] %0d (exp=%b, got=%b)", SignalIDName[sid], abit, v_count, xsig[abit], csig[abit]);
               else $fdisplay(diagf, "  %0d %0s[%d] (exp=%b, got=%b)", cpat, SignalIDName[sid], abit, xsig[abit], csig[abit]);
             end 
           end 
           nbfails = nbfails + 1;
           errshown = 1;
           ->error_ev;
         end 
       end 
     end 
   end 
   endtask

   task measure_scan_out;
     input reg [SIG_IDS-1:0] sid ;
     input integer  chain;
     reg [MAX_WIDTH-1:0] xsig;
     reg [MAX_WIDTH-1:0] csig;
     integer errshown, patoff;
   begin
     errshown = 0;
     get_stb_sig(sid, csig);
     xsig = ALLOUTSIGS[sid ];
     if ((xsig[0] !==1'bx) && (xsig[0] !== csig[0])) begin
       patoff = (loads > 1 || cur_pat <= 0) ? 0 : 1;
       if (prev_error != cur_pat) begin
         if (cur_pat <= 0 || cur_pat == last_pat && loads > 1) begin
           $display(">>>  Error during scan pattern %0d %s", (cur_pat < 0) ? 0 : cur_pat,  (cur_pat == last_pat) ? "(detected from final pattern unload)" : "");
         end
         else begin
           if (loads > 1) $display(">>>  Error during scan pattern %0d (detected from %0d load/unload)", cur_pat, loads);
           else begin $display(">>>  Error during scan pattern %0d (detected from unload of pattern %0d)", cur_pat, cur_pat-1); end
         end 
         prev_error = cur_pat;
       end
       $display(">>>  \tAt T=%0t, V=%0d, exp=%b, got=%b, chain %0s, pin %0s, scan cell %0d", $time, v_count, xsig[0], csig[0], CH_NAMES[chain], SignalIDName[sid], fsci);
       if (diagf) begin 
         if (diagm==2) $fdisplay(diagf, "  C %0s %0d (exp=%b, got=%b)", SignalIDName[sid], v_count, xsig[0], csig[0]);
          else $fdisplay(diagf, "  %0d %0s %0d (exp=%b, got=%b)", cur_pat-patoff, SignalIDName[sid], fsci, xsig[0], csig[0]);
       end 
       nbfails = nbfails + 1;
       ->error_ev;
             check_max_error_limit;
     end
   end 
   endtask

   always begin: measure_sigs_p
    fork
     forever @(ALLOUTSIGS['d`N223]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`N223, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`N329]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`N329, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`N370]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`N370, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`N421]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`N421, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`N430]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`N430, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`N431]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`N431, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`N432]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt ) measure_out_sig('d`N432, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`so]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `load_unloadStmt || cur_stmt == `multiclock_captureStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`so, 0); 
       else measure_out_sig('d`so, cur_stmt); 
     end
    join
   end 

   task undef_wfc;
     input reg [1:0] wfc;
     input reg [5:0] sid;
     input integer wftid;
   begin
     $display("XTB Error: unrecognized %s value (WFC):%0b, on signal %0s for WFT %0s. Exiting...", wfc[1]?"strobe":"force", wfc[0], SignalIDName[sid], WFTIDName[wftid]);
     $finish;
   end
   endtask

   task apply__multiclock_capture_WFT_WFT;
     reg [SIG_IDS_W-1:0] sid;
     reg [SIG_IDS_W-1:0] n;
     reg [SIG_IDS-1:0] s;
   begin
     for (sid=0; sid < SIG_IDS; sid=sid+1) begin
       n=0; 
       case(sid)
         'd33, 'd34, 'd35, 'd36, 'd37, 'd5, 'd6, 'd7, 'd2, 'd8, 'd9, 'd10, 'd11, 'd12, 'd13, 'd14, 'd15, 'd16, 'd3, 'd17, 'd18, 'd19, 'd20, 'd21, 'd22, 'd23, 'd24, 'd25, 'd26, 'd27, 'd28, 'd29, 'd4, 'd30, 'd31, 'd32, 'd38, 'd39: // N102_wire, N105_wire, N108_wire, N112_wire, N115_wire, N11_wire, N14_wire, N17_wire, N1_wire, N21_wire, N24_wire, N27_wire, N30_wire, N34_wire, N37_wire, N40_wire, N43_wire, N47_wire, N4_wire, N50_wire, N53_wire, N56_wire, N60_wire, N63_wire, N66_wire, N69_wire, N73_wire, N76_wire, N79_wire, N82_wire, N86_wire, N89_wire, N8_wire, N92_wire, N95_wire, N99_wire, si, se_con
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 0);
               endcase
             end
           end
         end 
         'd40, 'd41, 'd42, 'd43, 'd44, 'd45, 'd46, 'd47: // N223, N329, N370, N421, N430, N431, N432, so_con
         begin
           if (ALLOUTSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPOUTSIGS_T[MAX_SIGW*sid+n],TMPOUTSIGS_V[MAX_SIGW*sid+n]})
                 2'b1X: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(1) 1'bX;   end
                 2'b11: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(1) 1'b1;   end
                 2'b10: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(1) 1'b0;   end
                 2'b1Z: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(1) 1'bZ;   end
                 default: undef_wfc({TMPOUTSIGS_T[MAX_SIGW*sid+n],TMPOUTSIGS_V[MAX_SIGW*sid+n]}, sid, 0);
               endcase
             end
           end
         end 
         'd0: // clk
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 2'bZ1: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(2) 1'b1;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(3) 1'b0;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 0);
               endcase
             end
           end
         end 
         'd1: // reset
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 2'bZ1: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(2) 1'b1;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(3) 1'b0;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 0);
               endcase
             end
           end
         end 
       endcase 
     end 
   end 
   endtask

   task apply__default_WFT_WFT;
     reg [SIG_IDS_W-1:0] sid;
     reg [SIG_IDS_W-1:0] n;
     reg [SIG_IDS-1:0] s;
   begin
     for (sid=0; sid < SIG_IDS; sid=sid+1) begin
       n=0; 
       case(sid)
         'd33, 'd34, 'd35, 'd36, 'd37, 'd5, 'd6, 'd7, 'd2, 'd8, 'd9, 'd10, 'd11, 'd12, 'd13, 'd14, 'd15, 'd16, 'd3, 'd17, 'd18, 'd19, 'd20, 'd21, 'd22, 'd23, 'd24, 'd25, 'd26, 'd27, 'd28, 'd29, 'd4, 'd30, 'd31, 'd32, 'd38, 'd39: // N102_wire, N105_wire, N108_wire, N112_wire, N115_wire, N11_wire, N14_wire, N17_wire, N1_wire, N21_wire, N24_wire, N27_wire, N30_wire, N34_wire, N37_wire, N40_wire, N43_wire, N47_wire, N4_wire, N50_wire, N53_wire, N56_wire, N60_wire, N63_wire, N66_wire, N69_wire, N73_wire, N76_wire, N79_wire, N82_wire, N86_wire, N89_wire, N8_wire, N92_wire, N95_wire, N99_wire, si, se_con
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 1);
               endcase
             end
           end
         end 
         'd0: // clk
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 2'bZ1: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(2) 1'b1;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(3) 1'b0;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 1);
               endcase
             end
           end
         end 
         'd1: // reset
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 2'bZ1: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(2) 1'b1;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(3) 1'b0;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 1);
               endcase
             end
           end
         end 
         'd40, 'd41, 'd42, 'd43, 'd44, 'd45, 'd46, 'd47: // N223, N329, N370, N421, N430, N431, N432, so_con
         begin
           if (ALLOUTSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPOUTSIGS_T[MAX_SIGW*sid+n],TMPOUTSIGS_V[MAX_SIGW*sid+n]})
                 2'b1X: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(1) 1'bX;   end
                 2'b11: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(1) 1'b1;   end
                 2'b10: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(1) 1'b0;   end
                 2'b1Z: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(1) 1'bZ;   end
                 default: undef_wfc({TMPOUTSIGS_T[MAX_SIGW*sid+n],TMPOUTSIGS_V[MAX_SIGW*sid+n]}, sid, 1);
               endcase
             end
           end
         end 
       endcase 
     end 
   end 
   endtask

   task resolve_wft;
     input integer wftid ;
   begin
     if (wftid > WFT_IDS || wftid <0) begin 
       $display("\nXTB Error: undefined WFT id %0d (valid range is 0..%0d). Exiting...",wftid, WFT_IDS);
       $finish;
     end
     the_wft_id = wftid;
   end
   endtask

   task apply_wft; 
     input integer wftid ;
   begin
     case (wftid) 
       'd0: apply__multiclock_capture_WFT_WFT;
       'd1: apply__default_WFT_WFT;
       default:begin $display("\nXTB Error: undefined WFT id %d. Exiting...",wftid); $finish; end
     endcase
   end
   endtask 

   task complete_cycle;
     input integer wft_id ;
   begin
     case(wft_id)
       'd0: #(15); // _multiclock_capture_WFT_
       'd1: #(15); // _default_WFT_
     endcase
   end
   endtask

   task set_args;
     input reg [5:0] nargs;
     integer i, na;
     reg [2*CUM_WIDTH-1:0] sidx;
     reg [SIG_IDS_W-1:0] sid; 
   begin
     na = 0; sid_args = 'b0; sval_args = 'b0;
     while (na < nargs) begin
       data_i = data_i + 1;
       memel = memall[data_i];
       sid = memel[SIG_IDS_W-1:0];
       if (sid > SIG_IDS-1) begin
         $display($time, "\nXTB Error: Passing wrong signal ID (%0b), valid range is 1..%0d. Exiting...", sid, SIG_IDS-1);
         $finish; 
       end
       sid_args[sid] = 1'b1;
       sidx = sig_idx(sid);
       for (i = 0; i < 2*SignalIDWidth[sid]; i = i + 1)
         sval_args[sidx+i] = memel[i+SIG_IDS_W];
       na=na+1; 
    end  
  end 
  endtask

   function [2*CUM_WIDTH-1:0] sig_idx;
     input reg [SIG_IDS_W-1:0] sid;
     integer i; 
   begin
     sig_idx = 0;
     for (i = 0; i < sid; i = i + 1)  sig_idx = sig_idx+2*SignalIDWidth[i]; 
   end 
   endfunction

   task  assign_mval;
     input reg [SIG_IDS_W-1:0] sid;
     input reg [2*MAX_WIDTH-1:0] msval;
     reg [2*CUM_WIDTH-1:0] sidx;
     reg [2*MAX_WIDTH-1:0] sval;
     integer i;
   begin 
     sidx = sig_idx(sid);
     for (i = 0; i<2*SignalIDWidth[sid]; i = i + 1) sval[i] = (msval[SignalIDWidth[sid] + i] !== 1'bx && i < SignalIDWidth[sid]) ? msval[i] : sval_args[sidx+i]  ;
     assign_val(sid , sval);
   end 
   endtask

   task  assign_ival;
     input reg [SIG_IDS_W-1:0] sid;
     reg [2*CUM_WIDTH-1:0] sidx;
     reg [2*MAX_WIDTH-1:0] sval;
     integer i;
   begin 
     sidx = sig_idx(sid);
     for (i = 0; i<2*SignalIDWidth[sid]; i = i + 1) sval[i] = sval_args[sidx+i];
     assign_val(sid , sval);
   end 
   endtask

   task  assign_val;
     input reg [SIG_IDS_W-1:0] sid;
     input reg [2*MAX_WIDTH-1:0] sval;
     reg [MAX_WIDTH-1:0] nb; 
     reg [7:0] idx;
     integer n, ns;
   begin
     if (sid > SIG_IDS-1 || sid < 0) begin
       $display("\nXTB Error: Passing wrong signal ID (%d), valid range is 1..%0d. Exiting...", sid, SIG_IDS-1);
       $finish;
     end
     resolve_signal(sid);
     idx = 0; 
     ns = (SignalIDType[sid]==3) ? SignalIDWidth[sid] : 1;
     for (n = 0; n < ns; n = n + 1)
     begin
       if (sval[idx+SignalIDWidth[sid]] === 1'b1) begin
         for (nb = 0; nb < SignalIDWidth[the_sids[n]]; nb = nb + 1) begin
           TMPOUTSIGS_V[MAX_SIGW*the_sids[n]+nb]  = sval[idx+nb];
           TMPOUTSIGS_T[MAX_SIGW*the_sids[n]+nb]  = sval[idx+nb+SignalIDWidth[sid]];
           ALLOUTSIGIDS[the_sids[n]] = 1'b1; 
           if (sval[idx+nb] !== 1'bx)
             ALLINSIGIDS[the_sids[n]] = 1'b0;
         end
       end
       else begin
         for (nb = 0; nb < SignalIDWidth[the_sids[n]]; nb = nb + 1) begin
           TMPINSIGS_V[MAX_SIGW*the_sids[n]+nb]  = sval[idx+nb];
           TMPINSIGS_T[MAX_SIGW*the_sids[n]+nb]  = sval[idx+nb+SignalIDWidth[sid]];
           ALLINSIGIDS[the_sids[n]] = 1'b1;
           ALLOUTSIGIDS[the_sids[n]] = 1'b0;
       end 
     end
     idx = idx+SignalIDWidth[the_sids[n]];
     end 
   end 
   endtask

   task  check_sid_args;
     input reg [(NAMELENGTH-1):0] tname;
     input reg [SIG_IDS-1:0] vargs ;
     input reg [SIG_IDS-1:0] cargs ;
     integer i;
   begin
     for (i = 0; i < SIG_IDS-1; i = i + 1)
       if (cargs[i] === 1'b1 && vargs[i] !== 1'b1) begin
         $display("\nXTB Error: Passing wrong signal argument (%s), to Macro/Procedure %s. Exiting...", SignalIDName[i], tname); 
         $finish;
       end 
   end 
   endtask

   task  assign_stmt;
     input integer wftid ;
   begin
     v_count = v_count+1;
     v_count_per_pat = v_count_per_pat+1;
     v_count_per_stmt = v_count_per_stmt+1;
     if (verbose >= 4) $display("XTB: Starting V# %0d at time %0t", v_count, $time);
     apply_wft(wftid);
     complete_cycle(wftid);
   end
   endtask

   task display_stmt;
     input integer stmtid;
   begin
     $display("XTB: Processed statement: %0s", StmtNames[stmtid]);
   end
   endtask

   task read_data;
     integer tdf;
   begin
     tdf = $fopen(TDATA_FILE, "r");
     if (!tdf) begin 
       $display("XTB Error: cannot open %0s file. Exiting...\n", TDATA_FILE);
       $finish; 
      end 
      $fclose(tdf); 
     if (tdfm > 0) $display("XTB: Setting test data file to \"%0s\" (at %0s). Running simulation with new database...", TDATA_FILE, tdfm==1?"compile-time":"runtime");
     else if (verbose >= 1) $display("XTB: Reading test data file \"%0s\" ", TDATA_FILE);
     $readmemb(TDATA_FILE, memall);
   end
    endtask

   task measure_chain_out;
     input reg [NCHAINS-1:0] chid;
     integer bi, errshown, patoff, prefo;
     integer tsc;
     reg [0:MAXCHLEN-1] UNLM;
   begin
     tsc = 0;
     prefo = 0;
     UNLM = ~('b0);
     CHAINOUT[0] = (CHAINOUT0);
     UNL = UNLOAD[chid] << prefo;
     CHOUT = CHAINOUT[chid] ^ CH_OUTINV[chid] ^ CT_OUTINV[chid];

     for (bi = 0; bi < MAXCHLEN; bi = bi + 1)
       if (UNL[bi] === 1'bx) UNLM[bi] = 1'b0;

     for (bi = 0; bi < prefo; bi = bi + 1) UNLM[MAXCHLEN-1-bi] = 1'b0;

     if ((UNL&UNLM) !== (CHOUT&UNLM)) begin
       patoff = (loads > 1 || cur_pat <= 0) ? 0 : 1;
     if (cur_pat <= 0 || cur_pat == last_pat && loads > 1) begin
       $display(">>>  Error during scan pattern %0d %s", (cur_pat<0)?0:cur_pat, (cur_pat==last_pat)?"(detected from final parallel pattern unload)":"");
     end
     else begin
       if (loads > 1) $display(">>>  Error during scan pattern %0d (detected from %0d parallel load/unload)", cur_pat, loads);
       else begin $display(">>>  Error during scan pattern %0d (detected from parallel unload of pattern %0d)", cur_pat, cur_pat-1); end
     end
       for (bi = 0; bi < MAXCHLEN-prefo; bi=bi + 1) begin
         if ((UNL[bi] !== 1'bx) && (UNL[bi] !== CHOUT[bi])) begin
           $display(">>>  \tAt T=%0t, V=%0d, exp=%b, got=%b, chain %0s, pin %0s, scan cell %0d", $time, sertmg?v_count+1+bi+prefo:v_count, UNL[bi], CHOUT[bi], CH_NAMES[chid], CH_PINS[chid], bi+prefo+tsc);
           if (diagf) begin 
           if (diagm==2) $fdisplay(diagf, "  C %0s %0d (exp=%b, got=%b) ", CH_PINS[chid], v_count, UNL[bi], CHOUT[bi]);
           else $fdisplay(diagf, "  %0d %0s %0d (exp=%b, got=%b)",
               cur_pat-patoff, CH_PINS[chid], bi+prefo+tsc, UNL[bi], CHOUT[bi]);
           end 
           nbfails = nbfails + 1;
           ->error_ev;
       check_max_error_limit;
          end 
       end  
     end
   end 
   endtask

   task test_setup ;
     input reg [SIG_IDS-1:0] idargs;
     input reg [2*CUM_WIDTH-1:0] valargs;
   begin
     v_count_per_stmt = 0;
     if (test_setup_only_once > 0 && test_setup_runs > 0) begin
       if (verbose >= 2) $display("XTB: Skipping macro test_setup...");
       disable test_setup;
     end
     test_setup_runs = test_setup_runs + 1;
     if (verbose >= 2) $display("XTB: Starting macro test_setup..., T=%0t, V=%0d", $time, v_count+1);
     //check_sid_args("test_setup",55'b1, idargs);
     resolve_wft(1);

     assign_val('d`all_inputs , 80'b0000000000000000000000000000000000000000XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX);
     assign_val('d`all_outputs , 16'b11111111XXXXXXXX);

     assign_val('d`clk , 2'b00);
     assign_val('d`reset , 2'b00);
     assign_stmt(the_wft_id);

     assign_stmt(the_wft_id);

   end 
   endtask

   task shift_0 ;
     input reg [SIG_IDS-1:0] idargs;
     input reg [2*CUM_WIDTH-1:0] valargs;
     input integer stsci;
     input reg stroben;
   begin
    csci = stsci+0; prev_error = -2;
    while (csci < 43) begin
     fsci = csci;
     if (verbose >= 2) $display("XTB: shift %0d, at %0t ", csci, $time);
     resolve_wft(1);
     assign_val('d`_clk , 4'bZ010);
         if (idargs[51] === 1'b1 || idargs[38] === 1'b1) begin 
           LOD=LOAD[0]; assign_val('d`si , {1'b0, LOD[csci+0]});
         end
         if(stroben && (idargs[54] === 1'b1 || idargs[47] === 1'b1)) begin 
           UNL = UNLOAD[0]; assign_val('d`so , {1'b1,  UNL[csci+0]});
         end
     assign_stmt(the_wft_id);
     csci = csci+1;
    end
   end
   endtask


   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT0[0:31] = {`XTB_DUT_HIER.N432_reg.Q , `XTB_DUT_HIER.N431_reg.QN , `XTB_DUT_HIER.N430_reg.QN , `XTB_DUT_HIER.N421_reg.QN , `XTB_DUT_HIER.N370_reg.QN , `XTB_DUT_HIER.N329_reg.QN , `XTB_DUT_HIER.N223_reg.QN , `XTB_DUT_HIER.N115_reg.QN , `XTB_DUT_HIER.N112_reg.QN , `XTB_DUT_HIER.N108_reg.Q , `XTB_DUT_HIER.N105_reg.Q , `XTB_DUT_HIER.N102_reg.QN , `XTB_DUT_HIER.N99_reg.Q , `XTB_DUT_HIER.N95_reg.Q , `XTB_DUT_HIER.N92_reg.Q , `XTB_DUT_HIER.N89_reg.QN , `XTB_DUT_HIER.N86_reg.Q , `XTB_DUT_HIER.N82_reg.Q , `XTB_DUT_HIER.N79_reg.Q , `XTB_DUT_HIER.N76_reg.QN , `XTB_DUT_HIER.N73_reg.Q , `XTB_DUT_HIER.N69_reg.Q , `XTB_DUT_HIER.N66_reg.Q , `XTB_DUT_HIER.N63_reg.QN , `XTB_DUT_HIER.N60_reg.Q , `XTB_DUT_HIER.N56_reg.Q , `XTB_DUT_HIER.N53_reg.Q , `XTB_DUT_HIER.N50_reg.QN , `XTB_DUT_HIER.N47_reg.Q , `XTB_DUT_HIER.N43_reg.Q , `XTB_DUT_HIER.N40_reg.Q , `XTB_DUT_HIER.N37_reg.QN };
     CHAINOUT0[32:42] = {`XTB_DUT_HIER.N34_reg.Q , `XTB_DUT_HIER.N30_reg.Q , `XTB_DUT_HIER.N27_reg.Q , `XTB_DUT_HIER.N24_reg.QN , `XTB_DUT_HIER.N21_reg.Q , `XTB_DUT_HIER.N17_reg.Q , `XTB_DUT_HIER.N14_reg.Q , `XTB_DUT_HIER.N11_reg.QN , `XTB_DUT_HIER.N8_reg.Q , `XTB_DUT_HIER.N4_reg.QN , `XTB_DUT_HIER.N1_reg.Q };
   end

   `define CELL0IN0 `XTB_DUT_HIER.N1_reg.SI
   `define CHAININ0 {`XTB_DUT_HIER.N432_reg.SI , `XTB_DUT_HIER.N431_reg.SI , `XTB_DUT_HIER.N430_reg.SI , `XTB_DUT_HIER.N421_reg.SI , `XTB_DUT_HIER.N370_reg.SI , `XTB_DUT_HIER.N329_reg.SI , `XTB_DUT_HIER.N223_reg.SI , `XTB_DUT_HIER.N115_reg.SI , `XTB_DUT_HIER.N112_reg.SI , `XTB_DUT_HIER.N108_reg.SI , `XTB_DUT_HIER.N105_reg.SI , `XTB_DUT_HIER.N102_reg.SI , `XTB_DUT_HIER.N99_reg.SI , `XTB_DUT_HIER.N95_reg.SI , `XTB_DUT_HIER.N92_reg.SI , `XTB_DUT_HIER.N89_reg.SI , `XTB_DUT_HIER.N86_reg.SI , `XTB_DUT_HIER.N82_reg.SI , `XTB_DUT_HIER.N79_reg.SI , `XTB_DUT_HIER.N76_reg.SI , `XTB_DUT_HIER.N73_reg.SI , `XTB_DUT_HIER.N69_reg.SI , `XTB_DUT_HIER.N66_reg.SI , `XTB_DUT_HIER.N63_reg.SI , `XTB_DUT_HIER.N60_reg.SI , `XTB_DUT_HIER.N56_reg.SI , `XTB_DUT_HIER.N53_reg.SI , `XTB_DUT_HIER.N50_reg.SI , `XTB_DUT_HIER.N47_reg.SI , `XTB_DUT_HIER.N43_reg.SI , `XTB_DUT_HIER.N40_reg.SI , `XTB_DUT_HIER.N37_reg.SI , `XTB_DUT_HIER.N34_reg.SI , `XTB_DUT_HIER.N30_reg.SI , `XTB_DUT_HIER.N27_reg.SI , `XTB_DUT_HIER.N24_reg.SI , `XTB_DUT_HIER.N21_reg.SI , `XTB_DUT_HIER.N17_reg.SI , `XTB_DUT_HIER.N14_reg.SI , `XTB_DUT_HIER.N11_reg.SI , `XTB_DUT_HIER.N8_reg.SI , `XTB_DUT_HIER.N4_reg.SI ,  `CELL0IN0 }


   task p_shift_0 ;
     input reg [SIG_IDS-1:0] idargs;
     input reg [2*CUM_WIDTH-1:0] valargs;
     integer i, j;
   begin
     if (~(idargs[51] | idargs[38] | idargs[54] | idargs[47] )) 
       disable p_shift_0 ; 
     if (SSHIFTS < MAXCHLEN) begin
         if (verbose >= 2) $display("XTB: (parallel) shift, at %0t  ", $time);
         resolve_wft(1);
     fork 
       begin: b1 
         #1 ;
         -> strobe_scells;
         repeat (SYNC_LATENCY) #0;
         if (idargs[54] === 1'b1 ||  idargs[47] === 1'b1) begin 
           measure_chain_out('d0);
         end
         if (idargs[51] === 1'b1 ||  idargs[38] === 1'b1) begin 
           LOD0=(LOAD[0] >> SSHIFTS) ^ CH_INPINV[0];
         end

           ->force_scells; 
         #0;
       end 
       begin: b2
         assign_val('d`_clk , 4'bZ010);
         assign_stmt(the_wft_id);
       end 
     join 

     ->release_scells; 

         #0;
         if (sertmg == 1) begin
           v_count = v_count + PARSERINC - SSHIFTS - 1;
           for (i = 0; i < PARSERINC - SSHIFTS - 1; i = i+1)
             complete_cycle(the_wft_id);
         end
         if (SSHIFTS > 0) shift_0(idargs, valargs, MAXCHLEN-SSHIFTS, 0) ; 

     end 
     else begin 
         shift_0(idargs, valargs, 0, 1);
     end
   end
   endtask


   always /* ParallelShiftMode */ @(force_scells) begin 
           force `CHAININ0 = LOD0;

   end


   always /* ParallelShiftMode */ @(release_scells) begin 
     release `CHAININ0; 
   end

   task load_unload ;
     input reg [SIG_IDS-1:0] idargs;
     input reg [2*CUM_WIDTH-1:0] valargs;
   begin
     v_count_per_stmt = 0;
     if (verbose >= 2) $display("XTB: Starting proc load_unload..., T=%0t, V=%0d", $time, v_count+1);

     if (xtb_sim_mode == 0 && ser_pats > 0 && cur_pat < last_pat && cur_pat == (ser_pats+first_pat)) begin
       $display("XTB: Switching into Parallel simulation mode at pattern %0d (using %0d serial shifts)", cur_pat, SSHIFTS);
       xtb_sim_mode = 1; 
     end
     if (cur_pat != prev_pat) begin
       loads = 1;
       prev_pat = cur_pat;
       if (cur_pat % rep_pat == 0)
         $display("XTB: Begin %0s scan load for pattern %0d (T=%0t, V=%0d)", xtb_sim_mode?"parallel":"serial", cur_pat, $time, v_count+1);
     end
     else begin
       loads = loads + 1;
       if (cur_pat % rep_pat == 0)
         $display("XTB: Begin %0s scan load for pattern %0d, unload %0d (T=%0t, V=%0d)", xtb_sim_mode?"parallel":"serial", cur_pat, loads, $time, v_count+1);
     end
     save_context;
     resolve_wft(1);

     assign_val('d`all_inputs , 80'b0000000000000000000000000000000000000000XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX00XX);
     assign_val('d`all_outputs , 16'b11111111XXXXXXXX);

     assign_val('d`se , 2'b01);
     assign_stmt(the_wft_id);

     if (xtb_sim_mode)      p_shift_0(idargs, valargs);
     else      shift_0(idargs, valargs, 0, 1);

     restore_context;
   end 
   endtask

   task multiclock_capture ;
     input reg [SIG_IDS-1:0] idargs;
     input reg [2*CUM_WIDTH-1:0] valargs;
   begin
     v_count_per_stmt = 0;
     if (verbose >= 2) $display("XTB: Starting proc multiclock_capture..., T=%0t, V=%0d", $time, v_count+1);
     //check_sid_args("multiclock_capture",55'b1, idargs);
     save_context;
     resolve_wft(0);

     assign_val('d`all_inputs , 80'b0000000000000000000000000000000000000000XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX00XX);
     assign_val('d`all_outputs , 16'b11111111XXXXXXXX);

     if (idargs[48] === 1'b1) assign_ival('d`_pi );
     if (idargs[33] === 1'b1) assign_ival('d`N102_wire );
     if (idargs[34] === 1'b1) assign_ival('d`N105_wire );
     if (idargs[35] === 1'b1) assign_ival('d`N108_wire );
     if (idargs[36] === 1'b1) assign_ival('d`N112_wire );
     if (idargs[37] === 1'b1) assign_ival('d`N115_wire );
     if (idargs[5] === 1'b1) assign_ival('d`N11_wire );
     if (idargs[6] === 1'b1) assign_ival('d`N14_wire );
     if (idargs[7] === 1'b1) assign_ival('d`N17_wire );
     if (idargs[2] === 1'b1) assign_ival('d`N1_wire );
     if (idargs[8] === 1'b1) assign_ival('d`N21_wire );
     if (idargs[9] === 1'b1) assign_ival('d`N24_wire );
     if (idargs[10] === 1'b1) assign_ival('d`N27_wire );
     if (idargs[11] === 1'b1) assign_ival('d`N30_wire );
     if (idargs[12] === 1'b1) assign_ival('d`N34_wire );
     if (idargs[13] === 1'b1) assign_ival('d`N37_wire );
     if (idargs[14] === 1'b1) assign_ival('d`N40_wire );
     if (idargs[15] === 1'b1) assign_ival('d`N43_wire );
     if (idargs[16] === 1'b1) assign_ival('d`N47_wire );
     if (idargs[3] === 1'b1) assign_ival('d`N4_wire );
     if (idargs[17] === 1'b1) assign_ival('d`N50_wire );
     if (idargs[18] === 1'b1) assign_ival('d`N53_wire );
     if (idargs[19] === 1'b1) assign_ival('d`N56_wire );
     if (idargs[20] === 1'b1) assign_ival('d`N60_wire );
     if (idargs[21] === 1'b1) assign_ival('d`N63_wire );
     if (idargs[22] === 1'b1) assign_ival('d`N66_wire );
     if (idargs[23] === 1'b1) assign_ival('d`N69_wire );
     if (idargs[24] === 1'b1) assign_ival('d`N73_wire );
     if (idargs[25] === 1'b1) assign_ival('d`N76_wire );
     if (idargs[26] === 1'b1) assign_ival('d`N79_wire );
     if (idargs[27] === 1'b1) assign_ival('d`N82_wire );
     if (idargs[28] === 1'b1) assign_ival('d`N86_wire );
     if (idargs[29] === 1'b1) assign_ival('d`N89_wire );
     if (idargs[4] === 1'b1) assign_ival('d`N8_wire );
     if (idargs[30] === 1'b1) assign_ival('d`N92_wire );
     if (idargs[31] === 1'b1) assign_ival('d`N95_wire );
     if (idargs[32] === 1'b1) assign_ival('d`N99_wire );
     if (idargs[0] === 1'b1) assign_ival('d`clk );
     if (idargs[1] === 1'b1) assign_ival('d`reset );
     if (idargs[38] === 1'b1) assign_ival('d`si );
     if (idargs[39] === 1'b1) assign_ival('d`se );
     if (idargs[50] === 1'b1) assign_ival('d`_po );
     if (idargs[40] === 1'b1) assign_ival('d`N223 );
     if (idargs[41] === 1'b1) assign_ival('d`N329 );
     if (idargs[42] === 1'b1) assign_ival('d`N370 );
     if (idargs[43] === 1'b1) assign_ival('d`N421 );
     if (idargs[44] === 1'b1) assign_ival('d`N430 );
     if (idargs[45] === 1'b1) assign_ival('d`N431 );
     if (idargs[46] === 1'b1) assign_ival('d`N432 );
     if (idargs[47] === 1'b1) assign_ival('d`so );
     assign_stmt(the_wft_id);

     restore_context;
   end 
   endtask


   always @(start_part) begin: _burst__pattern__proc_unit

     integer nbpats, i;
     integer nargs, na;
     integer args;

     integer tdf;
     nbpats = 0; cur_pat = -1;
     loads = 1;

     end_pat = 0; v_count = 0; v_count_per_pat = 0; v_count_per_stmt = 0;
     nbfails = 0;
     prev_pat = -2; prev_error = -2; first_pat = 0;
     diagf = 0;
     if ( $value$plusargs ("tmax_diag_file=%s", diag_file )) diagm = diagm ? diagm : 1;
     read_data;
     data_i = 1; 
     popcode = 'd0;

     if (diagm > 0) begin
       if (diagm > 2) begin
         $display("XTB Warning: wrong diagnosis mode (%0d), using default mode 1 (pattern based)", diagm);
         diagm = 1 ; 
       end  
       if ( $value$plusargs ("tmax_diag_file=%s", diag_file )) begin
         $display("XTB: Setting run-time option \"tmax_diag_file\" to %0s .",diag_file);
       end 
       else begin
         `ifdef tmax_diag_file 
         diag_file = `tmax_diag_file;
         `else  diag_file = "c432Tb.diag"; 
         `endif 
       end
       diagf = $fopen(diag_file);
       if (diagf == 0) begin
         $display("XTB Error: Unable to open diagnosis file %s (for writing). Exiting...", diag_file);
         $finish; 
       end
       if (verbose >= 1) $display("XTB: User requesting TetraMAX compliant diagnosis file: %0s", diag_file);
       $fdisplay(diagf, "// Serial scan error:       <pat#> \t<pin_name> \t<shift_index> \t(<expected_value> <simulated_value>)");
       $fdisplay(diagf, "// USF Parallel scan error: <pat#> \t<pin_name> \t<shift_index> \t(<expected_value> <simulated_value>)");
       $fdisplay(diagf, "// DSF Parallel scan error: <pat#> \t<chain_name> \t<cell_index> \t(<expected_value> <simulated_value>)");
       $fdisplay(diagf, "// Capture error:           <pat#> \t<pin_name> \t(<expected_value> <simulated_value>)");
       $fdisplay(diagf, "// Cycle based error:          C \t<pin_name> \t<vect_nbr> \t(<expected_value> <simulated_value>)\n\n");

     end 

     memel = memall[data_i]; 
     total_pats = memel[31:0];
     data_i=data_i+1;

     last_pat = -1;

     n_pat_sim = -1;

     start_pat = -1;

     if (total_pats < 0 || |(total_pats) === 1'bx) begin
       $display("XTB Error: Inconsistent total number of patterns (%d). Exiting...",  total_pats);
       $finish;
     end

     if (verbose >= 1) $display("XTB: Total number of patterns  %0d",  total_pats); 
     if (last_pat == -1) last_pat = total_pats - 1;

     `ifdef tmax_n_pattern_sim
     last_pat=`tmax_n_pattern_sim;
     n_pat_sim=`tmax_n_pattern_sim;
     `endif

     `ifdef tmax_test_setup_only_once
     test_setup_only_once = 1;
     `endif

     xtb_sim_mode = 1;
     SSHIFTS = DFSHIFTS;

     ser_pats = 0;
     csim_op = -1;

     `ifdef tmax_serial
       if (~(`tmax_serial & 1'b1) == 1'b0) 
         ser_pats = last_pat + 1;
       else 
         ser_pats = `tmax_serial + 0;
       if (ser_pats > 0)
       csim_op = 0;
       `ifdef tmax_parallel 
         if (~(`tmax_parallel & 1'b1) == 1'b0) SSHIFTS = DFSHIFTS;
         else SSHIFTS = `tmax_parallel + 0; 
         if (ser_pats  >= last_pat + 1) begin	 
           csim_op = 2; 
         end 
         else if (ser_pats == 0)
           csim_op = 1;
       `endif
     `else 
       `ifdef tmax_parallel
         csim_op = 1;
         if (~(`tmax_parallel & 1'b1) == 1'b0) SSHIFTS = DFSHIFTS;
         else SSHIFTS = `tmax_parallel + 0; 
       `endif 
     `endif
     if (SSHIFTS < 0) begin
       $display("XTB Error: Passing negative value (%0d) of serial shifts in parallel mode. Exiting...",  SSHIFTS);
       $finish; 
     end

     process_rtops;
     `ifdef tmax_serial_timing 
       sertmg = 1;
       if (xtb_sim_mode == 1) $display("XTB: Parallel simulation (timing and vector) extended to match serial simulation");
     `else 
       sertmg = 0; 
     `endif


     $display("XTB: Starting %0s simulation of %0d pattern%s", xtb_sim_mode == 0 ? "serial" : "parallel", xtb_sim_mode == 0 ? ((ser_pats>last_pat || ser_pats==0)?(last_pat+1):ser_pats): last_pat + 1, (xtb_sim_mode!=0 || ser_pats>1)?"s":"");
     if (xtb_sim_mode) begin 
       $display("XTB: Using %0d serial shifts", SSHIFTS);
     end

     if (SSHIFTS >= MAXCHLEN)  begin 
       $display("XTB Warning: serial shifts (%0d) equals or exceeds max chain length (%0d). Performing full serial scan... ", SSHIFTS, MAXCHLEN); 
       xtb_sim_mode = 0;	
     end 

     if (diagm==2 && xtb_sim_mode==1)  begin 
       $display("XTB Warning: cannot display cycle-based diagnostic messages in parallel load mode simulation. Simulation will display pattern-based diagnostic messages."); 
       diagm = 1;	
     end 

     while (cur_pat <= last_pat && end_pat != 1) begin 
       memel = memall[data_i];
       opcode = memel[15:0];
       cur_stmt = -1;
       args = 'b0;
       case (opcode)
         'd`EndPat:  begin
                       cur_stmt = `EndPat;
                       end_pat = 1;
                     end
         'd`IncPat:  begin
                       cur_stmt = `IncPat;
                       cur_pat = cur_pat + 1;
                       v_count_per_pat = 0;
                       nbpats = nbpats+1;

                     end
         'd`SetLastReseed:  begin
                       cur_stmt = `SetLastReseed;
                       `ifdef tmax_fast_reseed
                       set_last_reseed = memel[17:16];
                       `else
                       set_last_reseed = 1;
                       `endif
                     end
         'd`SetValidStrobe:  begin
                       cur_stmt = `SetValidStrobe;
                     end
         'd`SetForceSI:  begin
                       cur_stmt = `SetForceSI;
                     end
         'd`SetPat:  begin
                       cur_stmt = `SetPat;
                       v_count_per_pat = 0;
                       if (cur_pat==-1) begin first_pat = memel[43:16]; cur_pat = first_pat; end
                       else cur_pat = memel[43:16];
                       if (start_pat==-1) start_pat = memel[43:16];
                       last_pat = last_pat + cur_pat; 
                       if (n_pat_sim>0) last_pat = start_pat+n_pat_sim;
                       nbpats = nbpats+1;  
                     end
         'd`WFTStmt: begin
                       cur_stmt = `WFTStmt;
                       resolve_wft(memel[17:16]);
                     end 
         'd`ConditionStmt, 'd`FixedStmt, 'd`VectorStmt: begin
           if (opcode == 'd`ConditionStmt) cur_stmt = 'd`ConditionStmt;
           else 	cur_stmt='d`VectorStmt;
           nargs = memel[21:16];
           na = 0;
           while (na<nargs) begin
             data_i = data_i + 1;
             memel = memall[data_i];
             assign_val(memel[SIG_IDS_W-1:0], memel[2*MAX_WIDTH+SIG_IDS_W-1:SIG_IDS_W]);
             na = na + 1;
           end
           if (opcode == `VectorStmt) assign_stmt(the_wft_id);
          end 
          'd`GenLoopStmt: begin: GenLoop_BLOCK
            cur_stmt = `GenLoopStmt;
            lp_count = 1;
            lp_addr = data_i;
            lp_max = memel[31:16];
            $display("\nXTB: starting loop statement with %0d iterations", lp_max); 
          end 
          'd`EndGenLoopStmt: begin: EndLoop_BLOCK
            cur_stmt = `EndGenLoopStmt;
            $display("\nXTB: loop iteration %0d/%0d done.", lp_count, lp_max);
            lp_count = lp_count+1;
            if (lp_count <= lp_max) begin
              data_i = lp_addr;
            end 
         end 
         'd`test_setupStmt: begin: test_setup_BLOCK
           cur_stmt = `test_setupStmt;
           set_args(memel[21:16]);
             test_setup(sid_args, sval_args);
         end 
         'd`load_unloadStmt: begin: load_unload_BLOCK
           cur_stmt = `load_unloadStmt;
            na = 0; nargs = 'b0; sid_args = 'b0; sval_args = 'b0;
            nargs = memel[21:16];
            while (na < nargs) begin
              data_i = data_i + 1;
              memel = memall[data_i];
              if (memel[SIG_IDS_W-1:0] > SIG_IDS-1) begin
                $display("\nXTB Error: Passing wrong signal ID (%b), valid range is 1..%d. Exiting...", memel[SIG_IDS_W-1:0], SIG_IDS-1);
                $finish;
              end
              sid_args[memel[SIG_IDS_W-1:0]] = 1'b1;
              case (memel[SIG_IDS_W-1:0])
               'd`_si , 'd`si: begin LOAD[0] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`_so , 'd`so: begin UNLOAD[0] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               default: begin  
                 $display("\nXTB Error: Wrong signal argument (%0s) passed to load_unload procedure. Exiting...", SignalIDName[memel[SIG_IDS_W-1:0]]);
                 $finish; 
               end 
             endcase 
             na = na+1;
           end
             load_unload(sid_args, sval_args);
         end 
         'd`multiclock_captureStmt: begin: multiclock_capture_BLOCK
           cur_stmt = `multiclock_captureStmt;
           set_args(memel[21:16]);
             multiclock_capture(sid_args, sval_args);
         end 
         default: begin $display("\nXTB Error: Unrecognized code %0h, @ inst %0d", opcode, data_i); $finish; end 
       endcase 
       data_i = data_i + 1;
       popcode = opcode;
       if (verbose >= 3) display_stmt(cur_stmt);
     end 
     $display("XTB: Simulation of %0d pattern%s completed with %0d mismatch%s (time: %0t, cycles: %0d)\n", nbpats+end_pat-1, (nbpats==1)?"":"s", nbfails, (nbfails==1)?"":"es", $time, v_count); 

     if (diagf) $fclose(diagf);
     ->end_part;
   end 


   task init_rtops;
     integer i;
   begin
     for (i=0; i<`NBRTOPS; i=i+1)
       rt_ops[i] = -1;
     RT_OPS [4] = "tmax_n_pattern_sim";
     RT_OPS [5] = "tmax_serial";
     RT_OPS [6] = "tmax_parallel";
     RT_OPS [0] = "tmax_msg";
     RT_OPS [1] = "tmax_rpt";
     RT_OPS [7] = "tmax_test_setup_only_once";
     RT_OPS [8] = "tmax_usf_debug_strobe_mode";
     RT_OPS [2] = "tmax_diag_file";
     RT_OPS [3] = "tmax_n_error_stop";
   end 
   endtask

   task process_rtops;
     integer sim_op, p_mode;
     integer i, r;
   begin
     sim_op = -1;
     init_rtops;
     for (i=0; i<`NBRTOPS; i=i+1)
       r = $value$plusargs ({RT_OPS[i], "=%d"}, rt_ops[i]);
     if ((rt_ops[4] > -1)) begin last_pat = rt_ops[4]; n_pat_sim = rt_ops[4]; end
     if (last_pat != total_pats-1) begin
       display_ops ((rt_ops[4] > 0), last_pat, RT_OPS[4]);
       $display("XTB: User requesting simulation of first %0d patterns", last_pat);
     end 
     if (last_pat >= total_pats && total_pats > 1) begin
       $display("XTB Warning: Requested simulation patterns (%0d) exceeds total pattern count (%0d). Adjusting...", last_pat+1, total_pats);
       last_pat = total_pats-1;
     end 
     else if (last_pat < 0 && total_pats != 0)  begin 
       $display("XTB Error: User requesting simulating wrong number of patterns (%0d). Exiting... ", last_pat+1);
       $finish;
     end
     if ((rt_ops[5] > 0)) begin
       if (rt_ops[5]==0) ser_pats = last_pat + 1;
       else ser_pats = rt_ops[5];
       sim_op = 0;
     end 
     else if (rt_ops[5] != 0 &&  ($test$plusargs ("tmax_serial"))) begin
       ser_pats = last_pat + 1;
       rt_ops[5] = ser_pats;
       sim_op = 0;
     end
     if ((rt_ops[5]>0) || (csim_op==0 || csim_op==2)) display_ops ((rt_ops[5]>0), ser_pats, RT_OPS[5]);
     p_mode = ((rt_ops[6] > -1) || ($test$plusargs ("tmax_parallel")))?1:0;
     if (p_mode) begin
       SSHIFTS = (rt_ops[6] > -1)?rt_ops[6]:DFSHIFTS;
       if (sim_op == -1)
         sim_op = 1;
       else  if (ser_pats  < last_pat + 1)
         sim_op = 0;
       else 
         sim_op = 2;
     end 
     if (p_mode || (csim_op==1 || csim_op==2)) display_ops (p_mode, SSHIFTS, RT_OPS[6]);
     if (sim_op > -1)
       set_sim_ops (sim_op);
     else if (csim_op > -1)
       set_sim_ops (csim_op);
     if (rt_ops[0] > -1) begin
       verbose = rt_ops[0];
     end
     if (verbose != 0) 
       display_ops ((rt_ops[0]>-1), verbose, RT_OPS[0]);
     if (rt_ops[1] > -1) begin
       rep_pat =  rt_ops[1];
     end
     if (rep_pat != 5) 
       display_ops ((rt_ops[1]>-1), rep_pat, RT_OPS[1]);
     if (rt_ops[7] != 0 && ($test$plusargs ("tmax_test_setup_only_once"))) begin
       test_setup_only_once = 1;
       rt_ops[7] = 1;
     end
     if (test_setup_only_once > 0) begin
       display_ops ((rt_ops[7]>-1), test_setup_only_once, RT_OPS[7]);
     end
   end 
   endtask

   task display_ops;
     input reg rt;
     input integer val;
     input reg [32*8:1] opname;
   begin
     $display("XTB: Setting %0s option \"%0s\" to %0d.", (rt==1)?"runtime":"compile-time",  opname, val);
   end 
   endtask

   task display_help;
   integer op;
   begin
     init_rtops;
     $display("\n\n\t\t----------------------- Runtime Help ------------------------------\n");
     $display("XTB: Usage is: <sim_exec> +opt1=val1 +opt2=val2...");
     $display("     where  <sim_exec> is the simulation exec name, and opt1 opt2 are available options and val1, val2 their corresponding values.");
     $display("     Available runtime options are:");
     op = 0;
     while (op < `NBRTOPS) begin
       $display("        +%0s", RT_OPS[op]);
       op = op + 1;
     end
     $display("\n      E.g.: simv +tmax_serial=2 +tmax_msg=2, runs first 2 patterns in serial and remaining in parallel, and set the verbose msg level to 2.");
     $display("\n Note: Runtime options override corresponding compile-time options.");
     $display("\n       Please refer to the User's Guide for details regarding each option.");
     $display("\n\t\t-------------------------------------------------------------------\n");
   end 
   endtask

   task set_sim_ops;
     input integer smode;
   begin
     if (smode==0) begin 
       xtb_sim_mode = 0;
       $write("XTB: Enabling serial simulation for");
       if (ser_pats < last_pat + 1) begin
         if (ser_pats==1) $write(" the first pattern.\n");
         else $write(" first %0d patterns.\n", ser_pats);
       end else 
         $write(" all patterns.\n");
     end
     else if (smode==1) begin 
       $write("XTB: Enabling parallel simulation with %0d serial shift(s).\n", SSHIFTS);
       xtb_sim_mode = 1;
     end 
     else  if (smode==2) begin
       $display("XTB Warning: requesting full serial simulation and full parallel simulation in the same time. Performing default parallel simulation mode...");
       xtb_sim_mode = 1;
     end 
   end 
   endtask

   task check_max_error_limit;
     begin
     if( rt_ops[3] > -1 && nbfails == rt_ops[3])    finish_at_max_error;
   end
     endtask

   task finish_at_max_error;
     begin
     $display("XTB: Simulation of %0d pattern%s completed with %0d mismatch%s (time: %0t, cycles: %0d)\n", cur_pat-first_pat+1, (cur_pat-first_pat+1==1)?"":"s", nbfails, (nbfails==1)?"":"es", $time, v_count); 
     $finish(0);
     end
     endtask


   initial begin: _burst__pattern__init_unit

     `ifdef tmax_fsdb
       $fsdbDumpvars;
     `endif


     for (n=0; n<SIG_IDS; n=n+1) SignalIDWidth[n] = 0;
     SignalIDName[0] = "clk";
     SignalIDType[0] = 0; //clk
     SignalIDWidth[0] = 1; //clk
     SignalIDName[1] = "reset";
     SignalIDType[1] = 0; //reset
     SignalIDWidth[1] = 1; //reset
     SignalIDName[2] = "N1_wire";
     SignalIDType[2] = 0; //N1_wire
     SignalIDWidth[2] = 1; //N1_wire
     SignalIDName[3] = "N4_wire";
     SignalIDType[3] = 0; //N4_wire
     SignalIDWidth[3] = 1; //N4_wire
     SignalIDName[4] = "N8_wire";
     SignalIDType[4] = 0; //N8_wire
     SignalIDWidth[4] = 1; //N8_wire
     SignalIDName[5] = "N11_wire";
     SignalIDType[5] = 0; //N11_wire
     SignalIDWidth[5] = 1; //N11_wire
     SignalIDName[6] = "N14_wire";
     SignalIDType[6] = 0; //N14_wire
     SignalIDWidth[6] = 1; //N14_wire
     SignalIDName[7] = "N17_wire";
     SignalIDType[7] = 0; //N17_wire
     SignalIDWidth[7] = 1; //N17_wire
     SignalIDName[8] = "N21_wire";
     SignalIDType[8] = 0; //N21_wire
     SignalIDWidth[8] = 1; //N21_wire
     SignalIDName[9] = "N24_wire";
     SignalIDType[9] = 0; //N24_wire
     SignalIDWidth[9] = 1; //N24_wire
     SignalIDName[10] = "N27_wire";
     SignalIDType[10] = 0; //N27_wire
     SignalIDWidth[10] = 1; //N27_wire
     SignalIDName[11] = "N30_wire";
     SignalIDType[11] = 0; //N30_wire
     SignalIDWidth[11] = 1; //N30_wire
     SignalIDName[12] = "N34_wire";
     SignalIDType[12] = 0; //N34_wire
     SignalIDWidth[12] = 1; //N34_wire
     SignalIDName[13] = "N37_wire";
     SignalIDType[13] = 0; //N37_wire
     SignalIDWidth[13] = 1; //N37_wire
     SignalIDName[14] = "N40_wire";
     SignalIDType[14] = 0; //N40_wire
     SignalIDWidth[14] = 1; //N40_wire
     SignalIDName[15] = "N43_wire";
     SignalIDType[15] = 0; //N43_wire
     SignalIDWidth[15] = 1; //N43_wire
     SignalIDName[16] = "N47_wire";
     SignalIDType[16] = 0; //N47_wire
     SignalIDWidth[16] = 1; //N47_wire
     SignalIDName[17] = "N50_wire";
     SignalIDType[17] = 0; //N50_wire
     SignalIDWidth[17] = 1; //N50_wire
     SignalIDName[18] = "N53_wire";
     SignalIDType[18] = 0; //N53_wire
     SignalIDWidth[18] = 1; //N53_wire
     SignalIDName[19] = "N56_wire";
     SignalIDType[19] = 0; //N56_wire
     SignalIDWidth[19] = 1; //N56_wire
     SignalIDName[20] = "N60_wire";
     SignalIDType[20] = 0; //N60_wire
     SignalIDWidth[20] = 1; //N60_wire
     SignalIDName[21] = "N63_wire";
     SignalIDType[21] = 0; //N63_wire
     SignalIDWidth[21] = 1; //N63_wire
     SignalIDName[22] = "N66_wire";
     SignalIDType[22] = 0; //N66_wire
     SignalIDWidth[22] = 1; //N66_wire
     SignalIDName[23] = "N69_wire";
     SignalIDType[23] = 0; //N69_wire
     SignalIDWidth[23] = 1; //N69_wire
     SignalIDName[24] = "N73_wire";
     SignalIDType[24] = 0; //N73_wire
     SignalIDWidth[24] = 1; //N73_wire
     SignalIDName[25] = "N76_wire";
     SignalIDType[25] = 0; //N76_wire
     SignalIDWidth[25] = 1; //N76_wire
     SignalIDName[26] = "N79_wire";
     SignalIDType[26] = 0; //N79_wire
     SignalIDWidth[26] = 1; //N79_wire
     SignalIDName[27] = "N82_wire";
     SignalIDType[27] = 0; //N82_wire
     SignalIDWidth[27] = 1; //N82_wire
     SignalIDName[28] = "N86_wire";
     SignalIDType[28] = 0; //N86_wire
     SignalIDWidth[28] = 1; //N86_wire
     SignalIDName[29] = "N89_wire";
     SignalIDType[29] = 0; //N89_wire
     SignalIDWidth[29] = 1; //N89_wire
     SignalIDName[30] = "N92_wire";
     SignalIDType[30] = 0; //N92_wire
     SignalIDWidth[30] = 1; //N92_wire
     SignalIDName[31] = "N95_wire";
     SignalIDType[31] = 0; //N95_wire
     SignalIDWidth[31] = 1; //N95_wire
     SignalIDName[32] = "N99_wire";
     SignalIDType[32] = 0; //N99_wire
     SignalIDWidth[32] = 1; //N99_wire
     SignalIDName[33] = "N102_wire";
     SignalIDType[33] = 0; //N102_wire
     SignalIDWidth[33] = 1; //N102_wire
     SignalIDName[34] = "N105_wire";
     SignalIDType[34] = 0; //N105_wire
     SignalIDWidth[34] = 1; //N105_wire
     SignalIDName[35] = "N108_wire";
     SignalIDType[35] = 0; //N108_wire
     SignalIDWidth[35] = 1; //N108_wire
     SignalIDName[36] = "N112_wire";
     SignalIDType[36] = 0; //N112_wire
     SignalIDWidth[36] = 1; //N112_wire
     SignalIDName[37] = "N115_wire";
     SignalIDType[37] = 0; //N115_wire
     SignalIDWidth[37] = 1; //N115_wire
     SignalIDName[38] = "si";
     SignalIDType[38] = 0; //si
     SignalIDWidth[38] = 1; //si
     SignalIDName[39] = "se";
     SignalIDType[39] = 0; //se
     SignalIDWidth[39] = 1; //se
     SignalIDName[40] = "N223";
     SignalIDType[40] = 1; //N223
     SignalIDWidth[40] = 1; //N223
     SignalIDName[41] = "N329";
     SignalIDType[41] = 1; //N329
     SignalIDWidth[41] = 1; //N329
     SignalIDName[42] = "N370";
     SignalIDType[42] = 1; //N370
     SignalIDWidth[42] = 1; //N370
     SignalIDName[43] = "N421";
     SignalIDType[43] = 1; //N421
     SignalIDWidth[43] = 1; //N421
     SignalIDName[44] = "N430";
     SignalIDType[44] = 1; //N430
     SignalIDWidth[44] = 1; //N430
     SignalIDName[45] = "N431";
     SignalIDType[45] = 1; //N431
     SignalIDWidth[45] = 1; //N431
     SignalIDName[46] = "N432";
     SignalIDType[46] = 1; //N432
     SignalIDWidth[46] = 1; //N432
     SignalIDName[47] = "so";
     SignalIDType[47] = 1; //so
     SignalIDWidth[47] = 1; //so
     SignalIDName[48] = "_pi";
     SignalIDType[48] = 3; //_pi
     SignalIDWidth[48] = 40; //_pi
     SignalIDName[49] = "all_inputs";
     SignalIDType[49] = 3; //all_inputs
     SignalIDWidth[49] = 40; //all_inputs
     SignalIDName[50] = "_po";
     SignalIDType[50] = 3; //_po
     SignalIDWidth[50] = 8; //_po
     SignalIDName[51] = "_si";
     SignalIDType[51] = 3; //_si
     SignalIDWidth[51] = 1; //_si
     SignalIDName[52] = "all_outputs";
     SignalIDType[52] = 3; //all_outputs
     SignalIDWidth[52] = 8; //all_outputs
     SignalIDName[53] = "_clk";
     SignalIDType[53] = 3; //_clk
     SignalIDWidth[53] = 2; //_clk
     SignalIDName[54] = "_so";
     SignalIDType[54] = 3; //_so
     SignalIDWidth[54] = 1; //_so
     WFTIDName[0] = "_multiclock_capture_WFT_";
     WFTIDName[1] = "_default_WFT_";
     StmtNames[0] = "SetLastReseed";
     StmtNames[1] = "EndPat";
     StmtNames[2] = "IncPat";
     StmtNames[3] = "SetPat";
     StmtNames[4] = "WFTStmt";
     StmtNames[5] = "ConditionStmt";
     StmtNames[6] = "VectorStmt";
     StmtNames[7] = "FixedStmt";
     StmtNames[8] = "GenLoopStmt";
     StmtNames[9] = "EndGenLoopStmt";
     StmtNames[10] = "GenTestSetupStmt";
     StmtNames[11] = "EndGenTestSetupStmt";
     StmtNames[12] = "SetForceSI";
     StmtNames[13] = "SetValidStrobe";
     StmtNames[14] = "AnnotationStmt";
     StmtNames[15] = "SetWPack";
     StmtNames[16] = "SetRPack";
     StmtNames[17] = "test_setupStmt";
     StmtNames[18] = "load_unloadStmt";
     StmtNames[19] = "multiclock_captureStmt";

     $display("%s",`MAXTB_H_S);
     $display("%s",`MAXTB_HEADER);
     $display("%s\n",`MAXTB_H_S);

     if ( $test$plusargs ("tmax_help") ) begin
       display_help;
       $finish(0);
     end

     $timeformat(-9,2," ns",19);

     `ifdef tmax_test_data_file 
       tdfm = 1;
       TDATA_FILE = `tmax_test_data_file ;
     `else
       tdfm = 0;
       TDATA_FILE = `TDATA_FILE ;
     `endif


     `ifdef tmax_diag_file 
       diagm = 1;
       diag_file = `tmax_diag_file ;
     `else
       tdfm = 0;
       diag_file = "" ;
     `endif

     `ifdef tmax_vcde
       $display("XTB: Dumping Extended VCD information in file \"c432Tb.vcd\"");
       $dumpports(`XTB_DUT_HIER, "c432Tb.vcd");
     `endif

     `ifdef tmax_msg
       verbose = `tmax_msg ;
     `else
       verbose = 0 ;
     `endif

     `ifdef tmax_debug
     if (~(`tmax_debug & 1'b1) == 1'b0)
       debug = 1;
     else
       debug = `tmax_debug + 0 ;
     `else
     debug = 0 ;
     `endif

     `ifdef tmax_rpt
     rep_pat = `tmax_rpt ;
     `else
     rep_pat = 5 ;
     `endif

     test_setup_runs = 0;

     set_last_reseed = 1;
     CH_NAMES[0] = "1";
     CH_PINS[0] = "so";
     CH_OUTINV[0] = 43'b0101010100011110000111100001111000011110011;
     CH_INPINV[0] = 43'b1010101011100001111000011110000111100001100;
     CT_OUTINV[0] = 43'b0111111110010001000100010001000100010001010;

     diagm = 0;
     diag_file = "";

     `ifdef tmax_diag 
       diagm = `tmax_diag;
     `endif

     -> start_part;
     @(end_part) #0;
     $finish(0);

   end

 endmodule
